{"version":3,"sources":["Tfjs.js","BlockCode.js","PythonCodeBase.js","BluetoothConnect.js","App.js","index.js","uuid.js","assets/images/servomotor.png","assets/images/motor.png","assets/images/led.png","assets/images/none.png"],"names":["TfMain","camera","machineId","downloadPy","ipAddress","console","log","this","infoTexts","data","label","training","videoPlaying","trained","inputFirst","isTraining","numClasses","completeModel","exampleCount","Array","fill","lastChildAddClass","piboxPy","body","document","undefined","current","bindPage","video","createElement","appendChild","i","div","style","marginBottom","button","innerText","addEventListener","infoText","push","id","train","download","src","width","height","crossOrigin","tf","mobilenet","layer","getLayer","inputs","outputs","output","loadMobileNet","trainable","predict","start","timer","stop","tagName","play","requestAnimationFrame","animate","bind","pause","cancelAnimationFrame","trainButton","getElementById","disabled","labels","model","denseLayer1","dense","inputShape","shape","slice","units","activation","use_bias","kernel_initializer","denseLayer2","add","compile","optimizer","adam","loss","metrics","forEach","e","parseInt","oldLabels","concat","dispose","fit","epochs","batchSize","length","callbacks","onBatchEnd","batch","logs","acc","then","info","history","save","http","requestInit","method","headers","machine_id","image","canvasEl","toString","canvas","className","insertBefore","firstChild","childNodes","removeChild","lastChild","ctx","getContext","imageData","ImageData","dataSync","j","putImageData","nowClass","fromPixels","infer","expandDims","toFloat","sub","newX","oldData","draw","logits","predictedClass","as1D","argMax","res","confidence","fontWeight","Math","round","BlockCode","props","useState","setLabels","ch1OutputType","setCh1OutputType","ch2OutputType","setCh2OutputType","ch1OutputAmount","setCh1OutputAmount","ch2OutputAmount","setCh2OutputAmount","tfFunc","setTfFunc","piboxUploadBtnName","setPiboxUploadBtnName","useRef","piboxUploadBtn","useEffect","getSetOutput","setOutputContext","getIfContext","chk","context","index","func","noOutputCh1","noOutputCh2","isNaN","parseFloat","r","g","b","getBackContext","back","a","front2","middleIf","file","Blob","type","piForm","FormData","append","fetch","mode","cache","credentials","redirect","referrer","sendCommand","uploadUUID","selectOutputMount","key","onChange","value","target","state","newState","display","backgroundColor","fontSize","borderRadius","defaultValue","textAlign","marginLeft","color","rgb","onChangeComplete","onClick","alert","url","ch1Command","ch2Command","sendMoving","marginRight","ref","addClass","nope","alt","servomotor","motor","led","map","verticalAlign","BluetoothConnect","connectDevice","navigator","bluetooth","requestDevice","filters","services","UUID","SERVICE_ID","device","gatt","connect","server","setState","serverId","getPrimaryService","service","isIphone","webBleConnect","getCharacteristics","characteristics","characteristicsList","isConnected","infoList","preset","uuid","DEVICE_MODEL","WIFI_NAME","IP_ADDRESS","subscribeCharacteristic","readInfoCharacteristic","NOTIFY_MESSAGE","CUSTOM_COMMAND_NOTIFY","filter","indexOf","CUSTOM_INFO_LABEL","item","replace","CUSTOM_INFO","uuid_label","tempCharList","CUSTOM_COMMAND_LABEL","commandList","readCommandLabel","catch","Promise","resolve","getCharacteristicInit","readValue","buffer","ab2str","tempCMDList","find","tempInfoList","event","msg","notify","show","commandOutputShouldRefresh","commandOutput","endsWith","startNotifications","getCharacteristic","PREFIX","CUSTOM_INFO_COUNT","characteristic","customInfoCount","CUSTOM_COMMAND_COUNT","customCommandCount","customInfoList","ending","repeat","customCommandList","all","SERVICE_NAME","INPUT_SEP","CUSTOM_COMMAND_INPUT","buf","String","fromCharCode","apply","Uint8Array","inputWifi","trim","ssid","password","errMsg","wifiLock","setTimeout","sendArray","str2abs","sendSeparately","array","writeValue","wait","sec","waitCamera","resp","ok","str","val","charCodeAt","valArray","split","bufferArray","splice","join","match","h","supportBluetooth","Boolean","window","isBlockCoding","loading","charLength","isAndroid","userAgent","toLowerCase","href","placeholder","c","React","Component","App","ReactDOM","render","module","exports","INPUT"],"mappings":"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","file":"static/js/main.5f85ba56.chunk.js","sourcesContent":["// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport * as tf from \"@tensorflow/tfjs\";\n\n// Number of classes to classify\nconst NUM_CLASSES = 2;\n// Webcam Image size. Must be 224.\nconst IMAGE_SIZE = 96;\n\nexport class TfMain {\n  constructor(camera, machineId, downloadPy, ipAddress) {\n    console.log(machineId);\n    // Initiate variables\n    this.infoTexts = [];\n    this.data = null;\n    this.label = [];\n    this.training = -1; // -1 when no class is being trained\n    this.videoPlaying = false;\n    this.trained = false;\n    this.inputFirst = true;\n    this.isTraining = false;\n    this.ipAddress = ipAddress;\n    this.numClasses = NUM_CLASSES;\n    this.completeModel = null;\n    this.exampleCount = new Array(NUM_CLASSES).fill(0);\n    this.lastChildAddClass = null;\n    this.machineId = machineId;\n    this.downloadPy = downloadPy;\n    this.piboxPy = \"\";\n\n    this.body = document.body;\n    if (camera.current !== undefined) {\n      this.body = camera.current;\n    }\n\n    this.bindPage();\n\n    // // Create video element that will contain the webcam image\n    // this.video = document.createElement(\"video\");\n    // this.video.setAttribute(\"autoplay\", \"\");\n    // this.video.setAttribute(\"playsinline\", \"\");\n\n    // Create image element for picamera streaming\n    this.video = document.createElement(\"img\");\n\n    // Add video element to DOM\n    this.body.appendChild(this.video);\n\n    // Create training buttons and info texts\n    for (let i = 0; i < this.numClasses; i++) {\n      const div = document.createElement(\"div\");\n      this.lastChildAddClass = div;\n      this.body.appendChild(div);\n\n      div.style.marginBottom = \"10px\";\n\n      // Create training button\n      const button = document.createElement(\"button\");\n      button.innerText = \"데이터 추가 - 클래스 \" + (i + 1);\n      div.appendChild(button);\n\n      // Listen for mouse events when clicking the button\n      button.addEventListener(\"mousedown\", () => (this.training = i));\n      button.addEventListener(\"mouseup\", () => (this.training = -1));\n\n      // Create info text\n      const infoText = document.createElement(\"span\");\n      infoText.innerText = \" 추가된 데이터가 없습니다.\";\n      div.appendChild(infoText);\n      this.infoTexts.push(infoText);\n    }\n\n    let div = document.createElement(\"div\");\n    this.lastChildAddClass = div;\n    this.body.appendChild(div);\n    div.style.marginBottom = \"10px\";\n\n    // Create training button\n    let button = document.createElement(\"button\");\n    button.innerText = \"학습하기\";\n    button.id = \"trainButton\";\n    div.appendChild(button);\n\n    // Listen for mouse events when clicking the button\n    button.addEventListener(\"mouseup\", () => this.train());\n\n    div = document.createElement(\"div\");\n    this.body.appendChild(div);\n    div.style.marginBottom = \"10px\";\n\n    // Create training button\n    // button = document.createElement(\"button\");\n    // button.innerText = \"학습한 모델 저장\";\n    // button.id = \"modelSave\";\n    // div.appendChild(button);\n\n    // Listen for mouse events when clicking the button\n    button.addEventListener(\"mouseup\", () => {\n      this.download();\n    });\n\n    //using webcam\n    if (0) {\n      // Setup webcam\n      navigator.mediaDevices.getUserMedia({ video: { width: IMAGE_SIZE, height: IMAGE_SIZE }, audio: false }).then((stream) => {\n        this.video.srcObject = stream;\n        this.video.width = IMAGE_SIZE;\n        this.video.height = IMAGE_SIZE;\n\n        this.video.addEventListener(\"playing\", () => (this.videoPlaying = true));\n        this.video.addEventListener(\"paused\", () => (this.videoPlaying = false));\n      });\n    }\n    //using picamera\n    if (1) {\n      this.video.src = \"http://\" + this.ipAddress + \":8000/stream.mjpg\";\n      this.video.width = IMAGE_SIZE;\n      this.video.height = IMAGE_SIZE;\n      this.video.crossOrigin = \"anonymous\";\n    }\n  }\n\n  addTrainingData(label) {\n    this.training = label;\n  }\n\n  async loadMobileNet() {\n    const mobilenet = await tf.loadLayersModel(`./assets/${IMAGE_SIZE}_0.35/model.json`);\n    const layer = mobilenet.getLayer(IMAGE_SIZE === 160 ? \"global_average_pooling2d\" : \"global_average_pooling2d_1\");\n    return tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n  }\n\n  async bindPage() {\n    this.mobilenet = await this.loadMobileNet();\n    this.mobilenet.trainable = false;\n    this.mobilenet.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3]));\n\n    //tf.setBackend(\"webgl\");\n    //console.log(this.model.summary());\n\n    this.start();\n  }\n\n  start() {\n    if (this.timer) {\n      this.stop();\n    }\n    if (this.video.tagName === \"video\") this.video.play();\n    else this.videoPlaying = true;\n    this.timer = requestAnimationFrame(this.animate.bind(this));\n  }\n\n  stop() {\n    if (this.video.tagName === \"video\") this.video.pause();\n    this.videoPlaying = false;\n    cancelAnimationFrame(this.timer);\n  }\n\n  train() {\n    if (!this.isTraining) {\n      const trainButton = document.getElementById(\"trainButton\");\n      trainButton.innerText = \"잠시 기다려주세요...\";\n      trainButton.disabled = true;\n      console.log(\"train start\");\n\n      this.isTraining = true;\n      let labels = null;\n      this.model = tf.sequential();\n      this.denseLayer1 = tf.layers.dense({\n        inputShape: this.mobilenet.outputs[0].shape.slice(1),\n        units: 100,\n        activation: \"relu\",\n        use_bias: true,\n        kernel_initializer: \"varianceScaling\",\n      });\n      this.denseLayer2 = tf.layers.dense({ units: this.numClasses, activation: \"softmax\", use_bias: false, kernel_initializer: \"varianceScaling\" });\n\n      this.model.add(this.denseLayer1);\n      this.model.add(this.denseLayer2);\n      this.model.compile({\n        optimizer: tf.train.adam(0.0001),\n        loss: \"categoricalCrossentropy\",\n        metrics: [\"accuracy\"],\n      });\n\n      this.label.forEach((e) => {\n        const label = tf.oneHot(tf.tensor1d([parseInt(e)], \"int32\"), this.numClasses);\n        if (labels === null) labels = label;\n        else {\n          const oldLabels = labels;\n          labels = oldLabels.concat(label, 0);\n          oldLabels.dispose();\n        }\n      });\n      //this.data.print();\n      //labels.print();\n      function onBatchEnd(batch, logs) {\n        console.log(\"Accuracy\", logs.acc);\n      }\n      this.model\n        .fit(this.data, labels, {\n          epochs: 20,\n          batchSize: parseInt(this.label.length * 0.4),\n          callbacks: { onBatchEnd },\n        })\n        .then((info) => {\n          console.log(\"Final accuracy\", info.history.acc);\n          this.trained = true;\n          this.isTraining = false;\n          trainButton.innerText = \"학습하기\";\n          trainButton.disabled = false;\n        });\n    }\n  }\n\n  async download() {\n    // const saveButton = document.getElementById(\"modelSave\");\n    // saveButton.innerText = \"잠시 기다려주세요...\";\n    // saveButton.disabled = true;\n    this.completeModel = tf.sequential();\n    this.completeModel.add(this.mobilenet);\n    this.completeModel.add(this.model);\n    try {\n      //await this.completeModel.save(\"downloads://model\");\n      await this.completeModel.save(\n        tf.io.http(\"https://tfjson-to-tflite.unicityclean.com/upload\", {\n          //tf.io.http(\"http://tfjson-to-tflite-2053599458.ap-northeast-2.elb.amazonaws.com/upload\", {\n          requestInit: { method: \"POST\", headers: { machine_id: this.machineId } },\n        })\n      );\n      // saveButton.innerText = \"(성공)학습한 모델 저장\";\n      // saveButton.disabled = false;\n    } catch (error) {\n      // saveButton.innerText = \"(실패)학습한 모델 저장\";\n      // saveButton.disabled = false;\n    }\n  }\n\n  async draw(image, label) {\n    const [width, height] = [IMAGE_SIZE, IMAGE_SIZE];\n    const canvasEl = document.getElementById(\"canvas-\" + label.toString());\n    const canvas = document.createElement(\"canvas\");\n\n    canvas.width = width;\n    canvas.height = height;\n    canvas.className = \"cameraData\";\n    canvasEl.insertBefore(canvas, canvasEl.firstChild);\n    if (canvasEl.childNodes.length > 9) canvasEl.removeChild(canvasEl.lastChild);\n    const ctx = canvas.getContext(\"2d\");\n    const imageData = new ImageData(width, height);\n    const data = image.dataSync();\n    for (let i = 0; i < height * width; ++i) {\n      const j = i * 4;\n      imageData.data[j + 0] = (data[i * 3 + 0] + 1) * 127;\n      imageData.data[j + 1] = (data[i * 3 + 1] + 1) * 127;\n      imageData.data[j + 2] = (data[i * 3 + 2] + 1) * 127;\n      imageData.data[j + 3] = 255;\n    }\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  addClass() {\n    this.exampleCount.push(0);\n    this.numClasses += 1;\n    const div = document.createElement(\"div\");\n\n    this.body.insertBefore(div, this.lastChildAddClass);\n\n    div.style.marginBottom = \"10px\";\n\n    // Create training button\n    const button = document.createElement(\"button\");\n    button.innerText = \"데이터 추가 - 클래스 \" + this.numClasses;\n    div.appendChild(button);\n    const nowClass = this.numClasses;\n    // Listen for mouse events when clicking the button\n    button.addEventListener(\"mousedown\", () => (this.training = nowClass - 1));\n    button.addEventListener(\"mouseup\", () => (this.training = -1));\n\n    // Create info text\n    const infoText = document.createElement(\"span\");\n    infoText.innerText = \" 추가된 데이터가 없습니다.\";\n    div.appendChild(infoText);\n    this.infoTexts.push(infoText);\n  }\n\n  async animate() {\n    if (this.videoPlaying) {\n      // Get image data from video element\n      const image = tf.browser.fromPixels(this.video);\n\n      let logits;\n      // 'conv_preds' is the logits activation of MobileNet.\n      const infer = () => tf.tidy(() => this.model.predict(this.mobilenet.predict(image.expandDims(0).toFloat().div(127).sub(1))));\n\n      // Train class if one of the buttons is held down\n      if (this.training !== -1) {\n        const newX = image.expandDims(0).toFloat().div(127).sub(1);\n        // Add current image to classifier\n        if (!this.inputFirst) {\n          const oldData = this.data;\n          this.data = oldData.concat(this.mobilenet.predict(newX), 0);\n          this.label.push(this.training);\n          oldData.dispose();\n        } else {\n          this.data = this.mobilenet.predict(newX);\n          this.label.push(this.training);\n          this.inputFirst = false;\n        }\n        await this.draw(newX, this.training);\n        this.exampleCount[this.training] += 1;\n        newX.dispose();\n      }\n\n      //if (hasClass(this.data.map(e => e.length)) > 0) {\n      if (this.trained) {\n        // If classes have been added run predict\n        logits = infer();\n        const predictedClass = logits.as1D().argMax();\n\n        const res = (await predictedClass.data())[0];\n        const confidence = await logits.data();\n        for (let i = 0; i < this.numClasses; i++) {\n          // Make the predicted class bold\n          if (res === i) {\n            this.infoTexts[i].style.fontWeight = \"bold\";\n          } else {\n            this.infoTexts[i].style.fontWeight = \"normal\";\n          }\n          if (this.exampleCount[i] > 0) {\n            this.infoTexts[i].innerText = ` ${this.exampleCount[i]} examples - ${Math.round(confidence[i] * 100)}%`;\n          }\n        }\n        predictedClass.dispose();\n      } else {\n        for (let i = 0; i < this.numClasses; i++) {\n          // The number of examples for each class\n\n          // Update info text\n          if (this.exampleCount[i] > 0) {\n            this.infoTexts[i].innerText = ` ${this.exampleCount[i]} examples`;\n          }\n        }\n      }\n\n      // Dispose image when done\n      image.dispose();\n      if (logits != null) {\n        logits.dispose();\n      }\n    }\n    this.timer = requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\n//window.addEventListener(\"load\", () => new Main());\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { SliderPicker } from \"react-color\";\nimport { TfMain } from \"./Tfjs\";\nimport servomotor from \"./assets/images/servomotor.png\";\nimport motor from \"./assets/images/motor.png\";\nimport led from \"./assets/images/led.png\";\nimport nope from \"./assets/images/none.png\";\nimport { front, middle } from \"./PythonCodeBase\";\n\nexport default function BlockCode(props) {\n  let fileReader;\n  const [labels, setLabels] = useState([\"클래스 1\", \"클래스 2\"]);\n  const [ch1OutputType, setCh1OutputType] = useState(0);\n  const [ch2OutputType, setCh2OutputType] = useState(0);\n  const [ch1OutputAmount, setCh1OutputAmount] = useState([]);\n  const [ch2OutputAmount, setCh2OutputAmount] = useState([]);\n  const [tfFunc, setTfFunc] = useState(null);\n  const [piboxUploadBtnName, setPiboxUploadBtnName] = useState(\"블록코드 업로드\");\n  const camera = useRef(\"\");\n  const piboxUploadBtn = useRef(\"\");\n\n  useEffect(() => {\n    if (camera.current !== undefined && props.machineId !== \"\") {\n      setTfFunc(new TfMain(camera, props.machineId, downloadPy, props.ipAddress));\n      setCh1OutputAmount(new Array(2).fill(\"\"));\n      setCh2OutputAmount(new Array(2).fill(\"\"));\n    } // eslint-disable-next-line\n  }, [camera, props.machineId]);\n\n  const uploadFile = (file) => {\n    // 파일이 입력되면 먼저 여기로 들어오게된다.\n    // 파일입력이 없음에도 들어오면 바로 컷\n    if (file === undefined) {\n      return;\n    }\n\n    fileReader = new FileReader();\n\n    fileReader.onloadend = () => {\n      const content = fileReader.result;\n      const result = [];\n      content.split(\"\\n\").forEach((label) => {\n        result.push(label.substr(2));\n        console.log(label);\n      });\n      if (result[result.length - 1] === \"\") {\n        result.pop();\n      }\n      setLabels(result);\n      setCh1OutputType(0);\n      setCh2OutputType(0);\n      setCh1OutputAmount(new Array(result.length).fill(\"\"));\n      setCh2OutputAmount(new Array(result.length).fill(\"\"));\n    };\n    fileReader.readAsText(file);\n  };\n\n  function addClass() {\n    tfFunc.addClass();\n    setLabels((state) => [...state, `클래스 ${labels.length + 1}`]);\n    setCh1OutputAmount((state) => [...state, \"\"]);\n    setCh2OutputAmount((state) => [...state, \"\"]);\n  }\n\n  function getSetOutput() {\n    let setOutputContext = `GPIO.setmode(GPIO.BCM)\npwm = pigpio.pi() \n    `;\n    // 서보모터\n    if (ch1OutputType === 1)\n      setOutputContext += `\npwm.set_mode(18, pigpio.OUTPUT)\n`;\n    else if (ch1OutputType === 2)\n      setOutputContext += `\nGPIO.setup(18,GPIO.OUT) # Channel 1 Speed\nGPIO.setup(23,GPIO.OUT) # Direction of Channel 1\nGPIO.output(23,0) \nm1=GPIO.PWM(18,50)\nm1.start(0)\n`;\n    else if (ch1OutputType === 3 && ch2OutputType !== 3)\n      setOutputContext += `\npix1 = neopixel.NeoPixel(board.D18,12)\n`;\n    // 서보모터\n    if (ch2OutputType === 1)\n      setOutputContext += `\npwm.set_mode(12, pigpio.OUTPUT)\n`;\n    else if (ch2OutputType === 2)\n      setOutputContext += `\nGPIO.setup(12,GPIO.OUT) # Channel 2 Speed\nGPIO.setup(25,GPIO.OUT)\nGPIO.output(25,0) # Direction of Channel 2\nm2=GPIO.PWM(12,50)\nm2.start(0)\n`;\n    else if (ch2OutputType === 3 && ch1OutputType !== 3)\n      setOutputContext += `\npix2 = neopixel.NeoPixel(board.D12,12)\n`;\n    return setOutputContext;\n  }\n  function getIfContext() {\n    let chk = 0;\n    let context = `    # From here. the block code\n    resultIndex = np.argmax(result)\n`;\n    labels.forEach((label, index) => {\n      let func = \"\";\n      let noOutputCh1 = false;\n      let noOutputCh2 = false;\n      if (ch1OutputType === 0) noOutputCh1 = true;\n      else if (ch1OutputType === 1) {\n        if (isNaN(parseFloat(ch1OutputAmount[index]))) noOutputCh1 = true;\n        else\n          func += `pwm.set_servo_pulsewidth(18,${(parseFloat(ch1OutputAmount[index]) / 180) * 2000 + 500}) # 500 => 0 deg / 1500 => 90 deg / 2500 => 180 deg\n        `;\n      }\n      // 서보모터\n      else if (ch1OutputType === 2)\n        func += `m1.ChangeDutyCycle(${ch1OutputAmount[index][1]})\n        GPIO.output(23,${ch1OutputAmount[index][0]}) # Control direction\n        ${\n          ch2OutputType === 2\n            ? \"\"\n            : `time.sleep(${ch1OutputAmount[index][2]})\n        m1.ChangeDutyCycle(0)\n        GPIO.output(23,0)\n        `\n        }\n        `;\n      // 모터\n      else if (ch1OutputType === 3)\n        func += `pix1.fill((${ch1OutputAmount[index].r},${ch1OutputAmount[index].g},${ch1OutputAmount[index].b}))\n        pix1.show()\n        `;\n      // LED\n      else noOutputCh1 = true;\n      if (ch2OutputType === 0) noOutputCh2 = true;\n      else if (ch2OutputType === 1) {\n        if (isNaN(parseFloat(ch2OutputAmount[index]))) noOutputCh2 = true;\n        else\n          func += `pwm.set_servo_pulsewidth(12,${(parseFloat(ch2OutputAmount[index]) / 180) * 2000 + 500}) # 500 => 0 deg / 1500 => 90 deg / 2500 => 180 deg\n        `;\n      }\n      // 서보모터\n      else if (ch2OutputType === 2)\n        func += `m2.ChangeDutyCycle(${ch2OutputAmount[index][1]})\n        GPIO.output(25,${ch2OutputAmount[index][0]}) # Control direction\n        time.sleep(${ch2OutputAmount[index][2]})\n        ${\n          ch1OutputType === 2\n            ? `m1.ChangeDutyCycle(0)\n        GPIO.output(23,0)`\n            : \"\"\n        }\n        m2.ChangeDutyCycle(0)\n        GPIO.output(25,0)\n        `;\n      // 모터\n      else if (ch2OutputType === 3)\n        func += `pix2.fill((${ch2OutputAmount[index].r},${ch2OutputAmount[index].g},${ch2OutputAmount[index].b}))\n        pix2.show()\n        `;\n      // LED\n      else noOutputCh2 = true;\n      if (noOutputCh1 === true && noOutputCh2 === true) return;\n      if (ch1OutputType === 1 && ch1OutputAmount[index] !== \"\")\n        if (chk === 0) {\n          context += `\n    if `;\n          chk = 1;\n        } else\n          context += `\n    elif `;\n      context += `resultIndex == ${index}:\n        ${func}\n        `;\n    });\n    return context;\n  }\n  function getBackContext() {\n    let back = `\n# Clean up\ncv2.destroyAllWindows()\nvideostream.stop()\n`;\n\n    if (ch1OutputType === 1 || ch2OutputType === 1) {\n      back += `pwm.stop()\n`;\n    }\n    if (ch1OutputType === 2) {\n      back += `m1.stop()\n`;\n    }\n    if (ch2OutputType === 2) {\n      back += `m2.stop()\n`;\n    }\n    back += `GPIO.cleanup()\n`;\n    return back;\n  }\n  const downloadPy = async () => {\n    setPiboxUploadBtnName(\"잠시만 기다려주세요...\");\n    piboxUploadBtn.current.disabled = true;\n    await tfFunc.download();\n    //const element = document.createElement(\"a\");\n    const front2 = getSetOutput();\n    const middleIf = getIfContext();\n    const back = getBackContext();\n    const file = new Blob([front, front2, middle, middleIf, back], {\n      type: \"text/plain\",\n    });\n    // element.href = URL.createObjectURL(file);\n    // element.download = \"pibox.py\";\n    // document.body.appendChild(element); // Required for this to work in FireFox\n    //element.click();\n    const piForm = new FormData();\n    piForm.append(\"pibox\", file, \"pibox.py\");\n    fetch(\"https://tfjson-to-tflite.unicityclean.com/pibox\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, cors, *same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        machine_id: props.machineId,\n      },\n      redirect: \"follow\", // manual, *follow, error\n      referrer: \"no-referrer\", // no-referrer, *client\n      body: piForm,\n    })\n      .then(() => {\n        props.sendCommand(props.uploadUUID);\n      })\n      .then(() => {\n        setPiboxUploadBtnName(\"블록코드 업로드\");\n        piboxUploadBtn.current.disabled = false;\n      });\n    return file;\n  };\n\n  //   function downloadBat(os) {\n  //     const element = document.createElement(\"a\");\n  //     const batText = `sshpass -praspberry scp -o StrictHostKeyChecking=no ./model.tflite pi@${props.ipAddress}:/home/pi/tflite/model.tflite\n  // sshpass -praspberry scp -o StrictHostKeyChecking=no ./labels.txt pi@${props.ipAddress}:/home/pi/tflite/labels.txt\n  // sshpass -praspberry scp -o StrictHostKeyChecking=no ./pibox.py pi@${props.ipAddress}:/home/pi/tflite/pibox.py\n  // `;\n  //     const file = new Blob([batText], {\n  //       type: \"text/plain\",\n  //     });\n  //     element.href = URL.createObjectURL(file);\n  //     element.download = os === \"WIN\" ? \"upload.bat\" : \"upload.sh\";\n  //     document.body.appendChild(element); // Required for this to work in FireFox\n  //     element.click();\n  //   }\n\n  const sendMoving = (index) => {\n    if (ch1OutputType === 2 || ch2OutputType === 2) {\n      alert(\"지금은 서보모터와 LED만 움직여볼 수 있습니다!\");\n    } else {\n      const url = \"http://\" + props.ipAddress + \":8000/move.html?\";\n      let ch1Command = \"None\";\n      if (!isNaN(parseFloat(ch1OutputAmount[index]))) {\n        switch (ch1OutputType) {\n          case 1:\n            ch1Command = \"servo_\" + ch1OutputAmount[index];\n            break;\n          case 3:\n            ch1Command = \"led_\" + ch1OutputAmount[index].r + \"_\" + ch1OutputAmount[index].g + \"_\" + ch1OutputAmount[index].b;\n            break;\n          default:\n            break;\n        }\n      }\n      let ch2Command = \"None\";\n      if (!isNaN(parseFloat(ch2OutputAmount[index]))) {\n        switch (ch2OutputType) {\n          case 1:\n            ch2Command = \"servo_\" + ch2OutputAmount[index];\n            break;\n          case 3:\n            ch2Command = \"led_\" + ch2OutputAmount[index].r + \"_\" + ch2OutputAmount[index].g + \"_\" + ch2OutputAmount[index].b;\n            break;\n          default:\n            break;\n        }\n      }\n      fetch(url + \"ch1=\" + ch1Command + \"&ch2=\" + ch2Command);\n    }\n  };\n\n  const selectOutputMount = (index) => (\n    <div className=\"showOutputType\" key={index}>\n      <span>\n        <h4>채널 1</h4>\n        {ch1OutputType === 1 ? (\n          <div className=\"servomotor\">\n            <p>몇 도 움직일까요? ( 0 ~ 180 )</p>\n            <input\n              style={{ height: 30 }}\n              onChange={(e) => {\n                let value = e.target.value;\n                setCh1OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = value > 180 ? 180 : value < 0 ? 0 : value;\n                  return newState;\n                });\n              }}\n              type=\"number\"\n              value={ch1OutputAmount[index] || \"\"}\n            />\n          </div>\n        ) : ch1OutputType === 2 ? (\n          <div style={{ display: \"inline\" }}>\n            <select\n              style={{ backgroundColor: \"#ffffff\", fontSize: 15, borderRadius: 2 }}\n              onChange={(e) => {\n                const value = e.target.value;\n                setCh1OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = [value, newState[index][1], newState[index][2]];\n                  return newState;\n                });\n              }}\n              defaultValue={ch1OutputAmount[index][0]}\n            >\n              <option value=\"0\">정방향</option>\n              <option value=\"1\">역방향</option>\n            </select>\n            <div style={{ display: \"flex\" }}>\n              <div>\n                <h5 style={{ textAlign: \"center\" }}>속도 ( 0 ~ 100 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh1OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [newState[index][0], value, newState[index][2]];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch1OutputAmount[index][1]}\n                />\n              </div>\n              <div style={{ marginLeft: \"10%\" }}>\n                <h5 style={{ textAlign: \"center\" }}>시간 ( 1 {\"=>\"} 1초 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh1OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [newState[index][0], newState[index][1], value];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch1OutputAmount[index][2]}\n                />\n              </div>\n            </div>\n          </div>\n        ) : ch1OutputType === 3 ? (\n          <div style={{ display: \"inline\" }}>\n            <SliderPicker\n              color={ch1OutputAmount[index]}\n              onChange={(value) => {\n                setCh1OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = value.rgb;\n                  return newState;\n                });\n              }}\n            />\n          </div>\n        ) : (\n          <div style={{ display: \"flex\" }}>출력 종류를 먼저 선택하세요</div>\n        )}\n      </span>\n      <span>\n        <h4>채널 2</h4>\n        {ch2OutputType === 1 ? (\n          <div className=\"servomotor\">\n            몇 도 움직일까요? ( 0 ~ 180 )<br />\n            <input\n              style={{ height: 30 }}\n              onChange={(e) => {\n                let value = e.target.value;\n                setCh2OutputAmount((state) => {\n                  const newState = [...state];\n\n                  newState[index] = value > 180 ? 180 : value < 0 ? 0 : value;\n                  return newState;\n                });\n              }}\n              type=\"number\"\n              value={ch2OutputAmount[index] || \"\"}\n            />\n          </div>\n        ) : ch2OutputType === 2 ? (\n          <div style={{ display: \"inline\" }}>\n            <select\n              style={{ backgroundColor: \"#ffffff\", fontSize: 15, borderRadius: 2 }}\n              onChange={(e) => {\n                const value = e.target.value;\n                setCh2OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = [value, newState[index][1], newState[index][2]];\n                  return newState;\n                });\n              }}\n              defaultValue={ch2OutputAmount[index][0]}\n            >\n              <option value=\"0\">정방향</option>\n              <option value=\"1\">역방향</option>\n            </select>\n            <div style={{ display: \"flex\" }}>\n              <div>\n                <h5 style={{ textAlign: \"center\" }}>속도 ( 0 ~ 100 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh2OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [newState[index][0], value, newState[index][2]];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch2OutputAmount[index][1]}\n                />\n              </div>\n              <div style={{ marginLeft: \"10%\" }}>\n                <h5 style={{ textAlign: \"center\" }}>시간 ( 1 {\"=>\"} 1초 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh2OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [newState[index][0], newState[index][1], value];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch2OutputAmount[index][2]}\n                />\n              </div>\n            </div>\n          </div>\n        ) : ch2OutputType === 3 ? (\n          <div style={{ display: \"inline\" }}>\n            <SliderPicker\n              color={ch2OutputAmount[index]}\n              onChangeComplete={(value) => {\n                setCh2OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = value.rgb;\n                  return newState;\n                });\n              }}\n            />\n          </div>\n        ) : (\n          <div style={{ display: \"flex\" }}>출력 종류를 먼저 선택하세요</div>\n        )}\n      </span>\n      <span>\n        <button onClick={() => sendMoving(index)}>움직여보기!</button>\n      </span>\n    </div>\n  );\n\n  const selectOutputType = () => (\n    //아웃풋 종류 보여줌\n    <div style={{ display: \"flex\" }}>\n      <div className=\"blocks\" style={{ display: \"inline\", width: \"49%\", marginRight: \"1%\" }}>\n        <div className=\"block\" ref={camera}></div>\n        <div className=\"block\">\n          <button ref={piboxUploadBtn} onClick={() => downloadPy()}>\n            {piboxUploadBtnName}\n          </button>\n        </div>\n        <div className=\"block\">\n          <button onClick={() => addClass()}>클래스 추가 +</button>\n        </div>\n      </div>\n      <div className=\"blocks\" style={{ display: \"inline\", width: \"49%\", marginLeft: \"1%\" }}>\n        <div className=\"block\">\n          <div>\n            <h4>채널 1 출력</h4>\n            <div className=\"pics\">\n              <div\n                className=\"outputType\"\n                onClick={() => {\n                  setCh1OutputType(0);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                }}\n              >\n                <img className={ch1OutputType === 0 ? \"outputPicSel\" : \"outputPic\"} src={nope} alt=\"no output\" />\n              </div>\n              <div\n                className=\"outputType\"\n                onClick={() => {\n                  setCh1OutputType(1);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill(\"0\");\n                  });\n                }}\n              >\n                <img className={ch1OutputType === 1 ? \"outputPicSel\" : \"outputPic\"} src={servomotor} alt=\"servomotor\" />\n              </div>\n\n              <div\n                onClick={() => {\n                  setCh1OutputType(2);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill([\"0\", \"50\", \"0.5\"]);\n                  });\n                }}\n                className=\"outputType\"\n              >\n                <img className={ch1OutputType === 2 ? \"outputPicSel\" : \"outputPic\"} src={motor} alt=\"motor\" />\n              </div>\n\n              <div\n                onClick={() => {\n                  if (ch2OutputType !== 3) {\n                    setCh1OutputType(3);\n                    setCh1OutputAmount((state) => {\n                      return new Array(state.length).fill({\n                        r: 255,\n                        g: 255,\n                        b: 255,\n                        a: 1,\n                      });\n                    });\n                  } else {\n                    alert(\"LED 출력은 1개의 채널만 가능합니다.\");\n                  }\n                }}\n                className=\"outputType\"\n              >\n                <img className={ch1OutputType === 3 ? \"outputPicSel\" : \"outputPic\"} src={led} alt=\"led\" />\n              </div>\n            </div>\n          </div>\n          <div>\n            <h4>채널 2 출력</h4>\n            <div className=\"pics\">\n              <div\n                className=\"outputType\"\n                onClick={() => {\n                  setCh2OutputType(0);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                }}\n              >\n                <img className={ch2OutputType === 0 ? \"outputPicSel\" : \"outputPic\"} src={nope} alt=\"no output\" />\n              </div>\n              <div\n                className=\"outputType\"\n                onClick={() => {\n                  setCh2OutputType(1);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill(\"0\");\n                  });\n                }}\n              >\n                <img className={ch2OutputType === 1 ? \"outputPicSel\" : \"outputPic\"} src={servomotor} alt=\"servomotor\" />\n              </div>\n\n              <div\n                onClick={() => {\n                  setCh2OutputType(2);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill([\"0\", \"50\", \"0.5\"]);\n                  });\n                }}\n                className=\"outputType\"\n              >\n                <img className={ch2OutputType === 2 ? \"outputPicSel\" : \"outputPic\"} src={motor} alt=\"motor\" />\n              </div>\n\n              <div\n                onClick={() => {\n                  if (ch1OutputType !== 3) {\n                    setCh2OutputType(3);\n                    setCh2OutputAmount((state) => {\n                      return new Array(state.length).fill({\n                        r: 255,\n                        g: 255,\n                        b: 255,\n                        a: 1,\n                      });\n                    });\n                  } else {\n                    alert(\"LED 출력은 1개의 채널만 가능합니다.\");\n                  }\n                }}\n                className=\"outputType\"\n              >\n                <img className={ch2OutputType === 3 ? \"outputPicSel\" : \"outputPic\"} src={led} alt=\"led\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"connect-panel panel\">\n      <div className=\"panel-title\">블록 코드</div>\n      {false ? (\n        <div>\n          <p>\n            라벨 : <input type=\"file\" accept=\".txt\" onChange={(e) => uploadFile(e.target.files[0])} />\n          </p>\n        </div>\n      ) : null}\n      <div className=\"label-output\">\n        <div className=\"blocks-container\">\n          <div>{selectOutputType()}</div>\n\n          <div>\n            {labels.map((label, index) => (\n              <div className=\"blocks\" key={label}>\n                <div className=\"block\">{label}</div>\n\n                <div>\n                  <span style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }} id={\"canvas-\" + index.toString()}></span>\n                  <span style={{ display: \"inline-block\", width: \"50%\", verticalAlign: \"top\" }}>{selectOutputMount(index)}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* <div>\n        <h4>\n          블록이 완성되었다면{\" \"}\n          <span style={{ color: \"blue\", cursor: \"pointer\" }} onClick={() => downloadPy()}>\n            코드 다운로드\n          </span>{\" \"}\n        </h4>\n      </div> */}\n      <div>\n        {/* <h4>\n          <span style={{ color: \"blue\", cursor: \"pointer\" }} onClick={() => downloadBat(\"WIN\")}>\n            코드 업로드 프로그램(윈도우)\n          </span>\n          <br />\n          코드와 업로드 프로그램 파일은 모델파일을 압축푼 폴더와 같은 폴더에 넣어주세요.\n        </h4> */}\n        <p>\n          초기 비밀번호 : raspberry\n          <br />\n        </p>\n      </div>\n    </div>\n  );\n}\n","export const front = `\n## pibox TFLITE\nimport os\nimport argparse\nimport cv2\nimport numpy as np\nimport sys\nimport time\nfrom threading import Thread\nimport importlib.util\n\n## 출력을 위한 import\nimport RPi.GPIO as GPIO\nimport pigpio\nimport time\nimport board\nimport neopixel\n\n`;\n\nexport const middle = `\n# 카메라 오브젝트\nclass VideoStream:\n    def __init__(self,resolution=(320,240),framerate=3): # 원래는 640,480 그리고 30 framerate\n        # 파이 카메라를 시작합니다.\n        self.stream = cv2.VideoCapture(0)\n        ret = self.stream.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))\n        ret = self.stream.set(3,resolution[0])\n        ret = self.stream.set(4,resolution[1])\n            \n        # 첫번째 사진을 불러옵니다.\n        (self.grabbed, self.frame) = self.stream.read()\n\n\t    # 멈출 수 있도록 stopped를 설정해줍니다.\n        self.stopped = False\n\n    def start(self):\n\t    # 비디오 스트림에서 프레임을 읽어오는 쓰레드를 시작합니다.\n        Thread(target=self.update,args=()).start()\n        return self\n\n    def update(self):\n        # 쓰레드가 멈출 때 까지 계속 스트림을 실행합니다.\n        while True:\n            # 카메라가 멈추면 스트림을 멈춥니다.\n            if self.stopped:\n                # 카메라 리소스를 닫습니다.\n                self.stream.release()\n                return\n\n            # 멈춘것이 아니라면 프레임을 가져옵니다.\n            (self.grabbed, self.frame) = self.stream.read()\n\n    def read(self):\n\t    # 가장 최근 프레임을 가져옵니다.\n        return self.frame\n\n    def stop(self):\n\t    # 카메라 쓰레드를 정지합니다.\n        self.stopped = True\n\n# 입력 파라미터를 정의합니다.\nparser = argparse.ArgumentParser()\nparser.add_argument('--modeldir', help='Folder the .tflite file is located in',\n                    required=True)\nparser.add_argument('--graph', help='Name of the .tflite file, if different than model.tflite',\n                    default='model.tflite')\nparser.add_argument('--labels', help='Name of the labelmap file, if different than labels.txt',\n                    default='labels.txt')\nparser.add_argument('--threshold', help='Minimum confidence threshold for displaying detected objects',\n                    default=0.5)\nparser.add_argument('--resolution', help='Desired webcam resolution in WxH. If the webcam does not support the resolution entered, errors may occur.',\n                    default='320x240') # 원래는 1280x720 속도를 위해 낮춤\nparser.add_argument('--edgetpu', help='Use Coral Edge TPU Accelerator to speed up detection',\n                    action='store_true',default=False)\n\nargs = parser.parse_args()\n\nMODEL_NAME = args.modeldir\nGRAPH_NAME = args.graph\nLABELMAP_NAME = args.labels\nmin_conf_threshold = float(args.threshold)\nresW, resH = args.resolution.split('x')\nimW, imH = int(resW), int(resH) # 라즈베리파이 제로 + 파이카메라에서는 224,224 가 아주 쬐에에에끔 빠릅니다.\nuse_TPU = args.edgetpu\n\n# 텐서플로우 라이브러리를 가져옵니다.\n# 텐서플로우 라이브러리가 없다면, tflite_runtime 을 가져옵니다.\n# 코랄 TPU를 사용한다면, TPU 용 라이브러리를 가져옵니다. (import the load_delegate library)\npkg = importlib.util.find_spec('tensorflow')\nif pkg is None:\n    from tflite_runtime.interpreter import Interpreter\n    if use_TPU:\n        from tflite_runtime.interpreter import load_delegate\nelse:\n    from tensorflow.lite.python.interpreter import Interpreter\n    if use_TPU:\n        from tensorflow.lite.python.interpreter import load_delegate\n\n# TPU를 사용한다면 TPU 모델을 가져옵니다.\nif use_TPU:\n    # 'edgetpu.tflite'가 TPU를 사용할 때의 기본 경로입니다.\n    if (GRAPH_NAME == 'model.tflite'):\n        GRAPH_NAME = 'edgetpu.tflite'       \n\n# 작업 경로와 현재 경로를 일치시킵니다.\nCWD_PATH = os.getcwd()\n\n# 모델 경로를 설정합니다.\nPATH_TO_CKPT = os.path.join(CWD_PATH,MODEL_NAME,GRAPH_NAME)\n\n# 라벨 경로를 설정합니다.\nPATH_TO_LABELS = os.path.join(CWD_PATH,MODEL_NAME,LABELMAP_NAME)\n\n# 라벨을 가져옵니다.\nwith open(PATH_TO_LABELS, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# 첫번째 라벨이 ??? 인 경우가 있어 그럴 경우 제거합니다.\nif labels[0] == '???':\n    del(labels[0])\n\n# 텐서플로우 모델을 가져옵니다. TPU를 쓸 경우 TPU 모델로 가져옵니다.\nif use_TPU:\n    interpreter = Interpreter(model_path=PATH_TO_CKPT,\n                              experimental_delegates=[load_delegate('libedgetpu.so.1.0')])\n    print(PATH_TO_CKPT)\nelse:\n    interpreter = Interpreter(model_path=PATH_TO_CKPT)\n\ninterpreter.allocate_tensors()\n\n# 로드된 모델의 정보를 가져옵니다.\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\nheight = input_details[0]['shape'][1]\nwidth = input_details[0]['shape'][2]\n#print(\"가로\")\n#print(width)\n#print(\"세로\")\n#print(height)\n# 입력이 소수인지 아닌지 판단합니다.\nfloating_model = (input_details[0]['dtype'] == np.float32)\n\ninput_mean = 127.5\ninput_std = 127.5\n\n# 연산 프레임을 체크하기 위한 변수를 할당합니다.\nframe_rate_calc = 1\nfreq = cv2.getTickFrequency()\n\n# 상단에서 정의한 비디오 스트림을 시작합니다.\nvideostream = VideoStream(resolution=(imW,imH),framerate=30).start() \ntime.sleep(1)\n\n# 프레임으로 연산을 시작합니다.\nwhile True:\n\n    # 연산 프레임을 위한 시간 체크 변수를 할당합니다.\n    t1 = cv2.getTickCount()\n\n    # 비디오스트림에서 프레임을 읽어옵니다.\n    frame1 = videostream.read()\n\n    # 입력에 넣을 수 있도록 해상도를 변경합니다.\n    frame = frame1.copy()\n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    # 위에서 input을 224,224로 설정했다면 아래 줄은 넘어가도 됩니다..\n    frame_resized = cv2.resize(frame_rgb, (width, height)) \n    input_data = np.expand_dims(frame_resized, axis=0)\n\n    # 입력이 소수라면 소수로 바꿔줍니다.\n    if floating_model:\n        input_data = (np.float32(input_data) - input_mean) / input_std\n\n    # 로드된 모델에 입력을 넣어 결과를 가져옵니다.\n    interpreter.set_tensor(input_details[0]['index'],input_data)\n    interpreter.invoke()\n    result=interpreter.get_tensor(output_details[0]['index'])[0]\n    print(labels[np.argmax(result)])\n    #print(result)\n    # 초당 연산 프레임을 계산합니다.\n    t2 = cv2.getTickCount()\n    time1 = (t2-t1)/freq\n    frame_rate_calc= 1/time1\n    #print(frame_rate_calc)\n`;\n","import React from \"react\";\nimport Notifications, { notify } from \"react-notify-toast\";\nimport WifiSSH from \"./WifiSSH\";\nimport BlockCode from \"./BlockCode\";\nimport \"./App.css\";\nimport UUID from \"./uuid\";\n\nexport default class BluetoothConnect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      supportBluetooth: Boolean(window.navigator.bluetooth),\n      isConnected: false,\n      serverId: \"\",\n      ssid: \"\",\n      password: \"\",\n      key: \"pibox\",\n      wifiLock: false,\n      characteristicsList: [],\n      infoList: [],\n      commandList: [],\n      isBlockCoding: false,\n      commandOutput: \"\",\n      commandOutputShouldRefresh: false,\n      loading: null,\n      charLength: -1,\n      customInfoCount: 0,\n      customCommandCount: 0,\n      isAndroid: navigator.userAgent.indexOf(\"Android\") > -1 || navigator.userAgent.indexOf(\"Adr\") > -1,\n      isIphone: navigator.userAgent.indexOf(\"iPhone\") > -1 || navigator.userAgent.indexOf(\"iphone\") > -1,\n    };\n    for (let i in UUID) {\n      UUID[i] = UUID[i].toLowerCase();\n    }\n  }\n\n  componentDidMount() {}\n\n  connectDevice = () => {\n    navigator.bluetooth\n      .requestDevice({\n        filters: [\n          {\n            services: [UUID.SERVICE_ID],\n          },\n        ],\n      })\n      .then((device) => {\n        //GO loading screen\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        this.setState({ serverId: server.device.id });\n        return server.getPrimaryService(UUID.SERVICE_ID);\n      })\n      .then((service) => {\n        if (this.state.isIphone) {\n          // iOS webBLE does not support getCharacteristics()\n          console.log(\"ios webBLE\");\n          return this.webBleConnect(service);\n        } else {\n          return service.getCharacteristics();\n        }\n      })\n      .then(async (characteristics) => {\n        console.log(\"Connected!\");\n        let characteristicsList = characteristics;\n        this.setState({ isConnected: true });\n        let infoList = [\n          {\n            preset: true,\n            uuid: \"\",\n            label: \"Device ID\",\n            value: this.state.serverId,\n          },\n          {\n            preset: true,\n            uuid: UUID.DEVICE_MODEL,\n            label: \"Model\",\n            value: \" \",\n          },\n          {\n            preset: true,\n            uuid: UUID.WIFI_NAME,\n            label: \"Wifi\",\n            value: \"...\",\n          },\n          {\n            preset: true,\n            uuid: UUID.IP_ADDRESS,\n            label: \"IP Address\",\n            value: \"...\",\n          },\n        ];\n\n        await this.subscribeCharacteristic(UUID.WIFI_NAME, infoList, characteristicsList);\n        await this.subscribeCharacteristic(UUID.IP_ADDRESS, infoList, characteristicsList);\n        await this.readInfoCharacteristic(UUID.DEVICE_MODEL, infoList, characteristicsList);\n        await this.subscribeCharacteristic(UUID.NOTIFY_MESSAGE, infoList, characteristicsList);\n        await this.subscribeCharacteristic(UUID.CUSTOM_COMMAND_NOTIFY, infoList, characteristicsList);\n\n        characteristicsList\n          .filter((i) => i.uuid.indexOf(UUID.CUSTOM_INFO_LABEL) >= 0)\n          .map((item) =>\n            infoList.push({\n              uuid: item.uuid.replace(UUID.CUSTOM_INFO_LABEL, UUID.CUSTOM_INFO),\n              uuid_label: item.uuid,\n              label: \"-\",\n              value: \"\",\n            })\n          );\n        for (let i = 0; i < infoList.length; i++) {\n          if (infoList[i].preset) continue;\n          await this.readInfoCharacteristic(infoList[i].uuid_label, infoList, characteristicsList);\n          await this.subscribeCharacteristic(infoList[i].uuid, infoList, characteristicsList);\n        }\n        let tempCharList = [];\n        characteristicsList\n          .filter((i) => i.uuid.indexOf(UUID.CUSTOM_COMMAND_LABEL) >= 0)\n          .map((item) =>\n            tempCharList.push({\n              uuid: item.uuid,\n              label: \"...\",\n            })\n          );\n        let commandList = tempCharList;\n        for (let i = 0; i < commandList.length; i++) {\n          await this.readCommandLabel(commandList[i].uuid, commandList, characteristicsList);\n        }\n        this.setState({\n          characteristicsList: characteristicsList,\n          infoList: infoList,\n          commandList: commandList,\n        });\n        //console.log(commandList);\n        // 0: {uuid: \"00000000-0000-0000-0000-fd2bcccc0001\", label: \"shutdown\"}\n        // 1: {uuid: \"00000000-0000-0000-0000-fd2bcccc0002\", label: \"reboot\"}\n        // 2: {uuid: \"00000000-0000-0000-0000-fd2bcccc0003\", label: \"start\"}\n        // 3: {uuid: \"00000000-0000-0000-0000-fd2bcccc0004\", label: \"stop\"}\n        // 4: {uuid: \"00000000-0000-0000-0000-fd2bcccc0005\", label: \"upload\"}\n        // 5: {uuid: \"00000000-0000-0000-0000-fd2bcccc0006\", label: \"camStart\"}\n\n        // loading close\n      })\n      .catch(console.log);\n  };\n\n  readCommandLabel = (uuid, commandList, characteristicsList) => {\n    //console.log(\"readCommandLabel\");\n    return new Promise((resolve) => {\n      this.getCharacteristicInit(uuid, characteristicsList)\n        .readValue()\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then((label) => {\n          let tempCMDList = commandList;\n          tempCMDList.find((i) => i.uuid === uuid).label = label;\n          this.setState({ commandList: tempCMDList }, resolve());\n        });\n    });\n  };\n\n  readInfoCharacteristic = (uuid, infoList, characteristicsList) => {\n    //console.log(\"readInfoCharacteristic\");\n    return new Promise((resolve) => {\n      this.getCharacteristicInit(uuid, characteristicsList)\n        .readValue()\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then((value) => {\n          const tempInfoList = infoList;\n          if (tempInfoList.find((i) => i.uuid === uuid)) {\n            tempInfoList.find((i) => i.uuid === uuid).value = value;\n          }\n          if (tempInfoList.find((i) => i.uuid_label === uuid)) {\n            tempInfoList.find((i) => i.uuid_label === uuid).label = value;\n          }\n          if (tempInfoList !== this.state.infoList) this.setState({ infoList: tempInfoList }, resolve());\n          else resolve();\n        });\n    });\n  };\n\n  subscribeCharacteristic = (uuid, infoList, characteristicsList) => {\n    //console.log(\"subscribeCharacteristic\");\n    return new Promise(async (resolve) => {\n      this.getCharacteristicInit(uuid, characteristicsList).addEventListener(\"characteristicvaluechanged\", (event) => {\n        if (event.target.uuid === UUID.NOTIFY_MESSAGE) {\n          let msg = this.ab2str(event.target.value.buffer);\n          notify.show(msg, \"custom\", 3000, \"teal\");\n        } else if (event.target.uuid === UUID.CUSTOM_COMMAND_NOTIFY) {\n          let msg = this.ab2str(event.target.value.buffer);\n          if (this.state.commandOutputShouldRefresh) {\n            this.setState({ commandOutputShouldRefresh: false, commandOutput: \"\" }, () => {\n              let output = this.state.commandOutput + msg;\n              if (output.endsWith(\"&#&\")) {\n                output = output.replace(\"&#&\", \"\");\n                this.setState({ commandOutputShouldRefresh: true });\n              }\n              this.setState({ commandOutput: output });\n            });\n          } else {\n            let output = this.state.commandOutput + msg;\n            if (output.endsWith(\"&#&\")) {\n              output = output.replace(\"&#&\", \"\");\n              this.setState({ commandOutputShouldRefresh: true });\n            }\n            this.setState({ commandOutput: output });\n          }\n        } else {\n          let value = this.ab2str(event.target.value.buffer);\n          let tempInfoList = infoList;\n          if (tempInfoList.find((i) => i.uuid === uuid)) {\n            tempInfoList.find((i) => i.uuid === uuid).value = value;\n          }\n          if (tempInfoList.find((i) => i.uuid_label === uuid)) {\n            tempInfoList.find((i) => i.uuid_label === uuid).label = value;\n          }\n          this.setState({ infoList: tempInfoList });\n        }\n      });\n      await this.getCharacteristicInit(uuid, characteristicsList).startNotifications();\n      resolve();\n    });\n  };\n\n  webBleConnect = (service) => {\n    return new Promise(async (resolve) => {\n      await service\n        .getCharacteristic(UUID.PREFIX + UUID.CUSTOM_INFO_COUNT)\n        .then((characteristic) => characteristic.readValue())\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then(parseInt)\n        .then((value) => {\n          console.log(\"custom-info-count \" + value);\n          this.setState({ customInfoCount: value });\n        });\n      await service\n        .getCharacteristic(UUID.PREFIX + UUID.CUSTOM_COMMAND_COUNT)\n        .then((characteristic) => characteristic.readValue())\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then(parseInt)\n        .then((value) => {\n          console.log(\"custom-command-count \" + value);\n          this.setState({ customCommandCount: value }, () => {\n            let customInfoList = [];\n            for (let index = 0; index < this.state.customInfoCount; index++) {\n              let ending = (index + 1).toString(16);\n              ending = \"0\".repeat(4 - ending.length) + ending;\n              customInfoList.push(UUID.PREFIX + UUID.CUSTOM_INFO + ending);\n              customInfoList.push(UUID.PREFIX + UUID.CUSTOM_INFO_LABEL + ending);\n            }\n            let customCommandList = [];\n            for (let index = 0; index < this.state.customCommandCount; index++) {\n              let ending = (index + 1).toString(16);\n              ending = \"0\".repeat(4 - ending.length) + ending;\n              customCommandList.push(UUID.PREFIX + UUID.CUSTOM_COMMAND_LABEL + ending);\n            }\n            resolve(\n              Promise.all([\n                service.getCharacteristic(UUID.SERVICE_NAME),\n                service.getCharacteristic(UUID.DEVICE_MODEL),\n                service.getCharacteristic(UUID.WIFI_NAME),\n                service.getCharacteristic(UUID.IP_ADDRESS),\n                service.getCharacteristic(UUID.NOTIFY_MESSAGE),\n                service.getCharacteristic(UUID.INPUT_SEP),\n                service.getCharacteristic(UUID.CUSTOM_COMMAND_INPUT),\n                service.getCharacteristic(UUID.CUSTOM_COMMAND_NOTIFY),\n                ...customInfoList.map((i) => service.getCharacteristic(i)),\n                ...customCommandList.map((i) => service.getCharacteristic(i)),\n              ])\n            );\n          });\n        });\n    });\n  };\n  ab2str = (buf) => {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n  };\n\n  getCharacteristic = (uuid) => {\n    return this.state.characteristicsList.find((i) => i.uuid === uuid);\n  };\n\n  getCharacteristicInit = (uuid, characteristicsList) => {\n    return characteristicsList.find((i) => i.uuid === uuid);\n  };\n\n  inputWifi = () => {\n    this.setState(\n      {\n        key: this.state.key.trim().replace(/\\|/g, \"*\"),\n        ssid: this.state.ssid.trim().replace(/\\|/g, \"*\"),\n        password: this.state.password.trim().replace(/\\|/g, \"*\"),\n      },\n      () => {\n        let errMsg;\n        if (this.state.ssid === \"\") {\n          errMsg = \"SSID cannot be empty.\";\n        }\n        if (this.state.password === \"\") {\n          errMsg = \"Password cannot be empty.\";\n        }\n        if (errMsg) {\n          notify.show(errMsg, \"custom\", 3000, \"teal\");\n          return;\n        }\n        this.setState({ wifiLock: true }, () =>\n          setTimeout(() => {\n            this.setState({ wifiLock: false });\n          }, 4000)\n        );\n\n        let sendArray = this.str2abs(`${this.state.key}%&%${this.state.ssid}%&%${this.state.password}&#&`);\n        this.sendSeparately(sendArray, UUID.INPUT_SEP);\n      }\n    );\n  };\n  sendCommand = (uuid) => {\n    let sendArray = this.str2abs(`${this.state.key}%&%${uuid.slice(-4)}&#&`);\n    this.sendSeparately(sendArray, UUID.CUSTOM_COMMAND_INPUT);\n  };\n  sendSeparately = async (array, uuid) => {\n    for (const i in array) {\n      await this.getCharacteristic(uuid).writeValue(array[i]);\n      await this.wait(0.4);\n    }\n  };\n  wait = async (sec) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(true);\n      }, 1000 * sec);\n    });\n  };\n  waitCamera = async () => {\n    let chk = true;\n    if (this.state.infoList.find((i) => i.label === \"IP Address\") !== undefined && this.state.infoList.find((i) => i.label === \"IP Address\").value !== \"\") {\n      while (chk) {\n        await fetch(\"http://\" + this.state.infoList.find((i) => i.label === \"IP Address\").value + \":8000/index.html\")\n          // eslint-disable-next-line\n          .then(async (resp) => {\n            if (!resp.ok) {\n              await this.wait(0.5);\n            } else {\n              chk = false;\n            }\n          })\n          .catch(async () => {\n            await this.wait(0.5);\n          });\n      }\n      return true;\n    } else {\n      alert(\"와이파이가 연결되어있지 않습니다.\");\n      return false;\n    }\n  };\n  str2abs = (str) => {\n    let val = \"\";\n    for (let i = 0; i < str.length; i++) {\n      if (val === \"\") {\n        val = str.charCodeAt(i).toString(16);\n      } else {\n        val += \",\" + str.charCodeAt(i).toString(16);\n      }\n    }\n    let valArray = val.split(\",\");\n    let bufferArray = [];\n    while (valArray.length > 0) {\n      let value = valArray.splice(0, 20).join(\",\");\n      bufferArray.push(\n        new Uint8Array(\n          value.match(/[\\da-f]{2}/gi).map(function (h) {\n            return parseInt(h, 16);\n          })\n        ).buffer\n      );\n    }\n    return bufferArray;\n  };\n\n  render() {\n    return (\n      <div className=\"BluetoothConnect\">\n        <div id=\"app\">\n          <Notifications />\n          <div className=\"panel-container\">\n            {!this.state.supportBluetooth ? (\n              <div className=\"connect-panel panel\">\n                <div className=\"panel-title\">Cannot find web bluetooth.</div>\n                <p>\n                  Please make sure your device and browser support web bluetooth. Please visit{\" \"}\n                  <a href=\"https://github.com/WebBluetoothCG/web-bluetooth/blob/master/implementation-status.md\" target=\"_brank\">\n                    Here\n                  </a>{\" \"}\n                  to check web-bluetooth compatibility.\n                </p>\n              </div>\n            ) : null}\n            {!this.state.isConnected && this.state.supportBluetooth ? (\n              <div className=\"connect-panel panel\">\n                <div className=\"panel-title\">PIBOX. 라즈베이파이를 블루투스로 찾아 제어할 수 있습니다.</div>\n                <div>\n                  <button className=\"findBluetooth\" onClick={this.connectDevice}>\n                    블루투스로 찾기\n                  </button>\n                </div>\n              </div>\n            ) : null}\n            {this.state.isConnected ? (\n              <div className=\"info-panel panel\">\n                <div className=\"panel-title\">기기 정보</div>\n                {this.state.infoList.map((item) => {\n                  if (item.label === \"Wifi\" || item.label === \"IP Address\" || item.label === \"CPU Temp\" || item.label === \"CPU Load\") {\n                    return (\n                      <div key={item.uuid} className=\"info-group\">\n                        <div className=\"label\">{item.label}</div>\n                        <div className=\"value\">{item.value}</div>\n                      </div>\n                    );\n                  } else {\n                    return null;\n                  }\n                })}\n              </div>\n            ) : null}\n            {this.state.isConnected ? (\n              <div className=\"wifi-panel panel\">\n                <div className=\"panel-title\">라즈베리파이 와이파이 설정</div>\n                <div>\n                  <input placeholder=\"와이파이 이름(SSID)\" value={this.state.ssid} onChange={(value) => this.setState({ ssid: value.target.value })} />\n                </div>\n                <div>\n                  <input placeholder=\"와이파이 비밀번호\" value={this.state.password} onChange={(value) => this.setState({ password: value.target.value })} type=\"password\" />\n                </div>\n                {/* <div>\n                  <input placeholder=\"Key (Default: pibox)\" value={this.state.key} onChange={(value) => this.setState({ key: value.target.value })} />\n                </div> */}\n                <div>\n                  <button onClick={this.inputWifi} disabled={this.state.wifiLock}>\n                    와이파이 설정\n                  </button>\n                </div>\n              </div>\n            ) : null}\n            {/* <div className=\"command-panel panel\">\n              <div className=\"panel-title\">커스텀 명령어</div>\n              {this.state.commandList.length > 0 ? (\n                <div>\n                  <div>\n                    {this.state.commandList.map((item) => (\n                      <div key={item.uuid} className=\"button-wrap\">\n                        <button size=\"small\" onClick={() => this.sendCommand(item.uuid)}>\n                          {item.label}\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                  <div>\n                    <input placeholder=\"Key (Default: pibox)\" value={this.state.key} onChange={(value) => this.setState({ key: value.target.value })} />\n                  </div>\n                  <div>\n                    <input type=\"textarea\" placeholder=\"Output\" value={this.state.commandOutput} readOnly={true} rows=\"10\" />\n                  </div>\n                </div>\n              ) : (\n                <p>커스텀 명령어가 없습니다.</p>\n              )}\n            </div> */}\n          </div>\n          {this.state.isConnected && false ? (\n            <div className=\"panel-container\">\n              <WifiSSH ipAddress={this.state.infoList.find((i) => i.label === \"IP Address\") === undefined ? \"\" : this.state.infoList.find((i) => i.label === \"IP Address\").value} />\n            </div>\n          ) : null}\n          {this.state.isConnected &&\n          this.state.infoList.find((i) => i.label === \"IP Address\") !== undefined &&\n          this.state.infoList.find((i) => i.label === \"IP Address\").value !== \"\" &&\n          this.state.infoList.find((i) => i.label === \"Machine ID\") !== undefined &&\n          this.state.infoList.find((i) => i.label === \"Machine ID\").value !== \"\" ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(this.state.commandList.find((c) => c.label === \"camStart\").uuid);\n                  await this.wait(2.0);\n                  await this.waitCamera();\n                  this.setState({ isBlockCoding: true });\n                }}\n              >\n                <div className=\"panel-title\">블록코드 시작</div>\n              </div>\n            </div>\n          ) : null}\n          {this.state.isConnected && this.state.isBlockCoding ? (\n            <div className=\"panel-container\">\n              <BlockCode\n                ipAddress={this.state.infoList.find((i) => i.label === \"IP Address\") === undefined ? \"\" : this.state.infoList.find((i) => i.label === \"IP Address\").value}\n                machineId={this.state.infoList.find((i) => i.label === \"Machine ID\") === undefined ? \"\" : this.state.infoList.find((i) => i.label === \"Machine ID\").value}\n                sendCommand={this.sendCommand}\n                uploadUUID={this.state.commandList.find((c) => c.label === \"upload\").uuid}\n              />\n            </div>\n          ) : null}\n          {this.state.isConnected ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(this.state.commandList.find((c) => c.label === \"start\").uuid);\n                  await this.wait(0.5);\n                }}\n              >\n                <div className=\"panel-title\">PLAi 실행!</div>\n              </div>\n            </div>\n          ) : null}\n          {this.state.isConnected ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(this.state.commandList.find((c) => c.label === \"reboot\").uuid);\n                  await this.wait(0.5);\n                }}\n              >\n                <div className=\"panel-title\">PLAi 재부팅!</div>\n              </div>\n            </div>\n          ) : null}\n          {this.state.isConnected ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(this.state.commandList.find((c) => c.label === \"stop\").uuid);\n                  await this.wait(0.5);\n                }}\n              >\n                <div className=\"panel-title\">PLAi 정지!</div>\n              </div>\n            </div>\n          ) : null}\n\n          <div className=\"copyright\">PiBox . Open source under GPL-3.0 license.</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport BluetoothConnect from \"./BluetoothConnect\";\n\nfunction App() {\n  return <BluetoothConnect />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") || document.createElement(\"div\"));\n","module.exports = {\n  PREFIX: \"00000000-0000-0000-0000-\",\n  SERVICE_ID: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0000\",\n  SERVICE_NAME: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0001\",\n  DEVICE_MODEL: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0002\",\n  WIFI_NAME: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0003\",\n  IP_ADDRESS: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0004\",\n  INPUT: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0005\",\n  NOTIFY_MESSAGE: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0006\",\n  INPUT_SEP: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0007\",\n  CUSTOM_COMMAND_INPUT: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0008\",\n  CUSTOM_COMMAND_NOTIFY: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0009\",\n  CUSTOM_INFO_LABEL: \"FD2BCCCA\",\n  CUSTOM_INFO_COUNT: \"FD2BCCAA0000\",\n  CUSTOM_INFO: \"FD2BCCCB\",\n  CUSTOM_COMMAND_LABEL: \"FD2BCCCC\",\n  CUSTOM_COMMAND_COUNT: \"FD2BCCAC0000\"\n};\n","module.exports = __webpack_public_path__ + \"static/media/servomotor.ba097c0f.png\";","module.exports = __webpack_public_path__ + \"static/media/motor.d4643de8.png\";","module.exports = __webpack_public_path__ + \"static/media/led.cd049886.png\";","module.exports = __webpack_public_path__ + \"static/media/none.bd980005.png\";"],"sourceRoot":""}