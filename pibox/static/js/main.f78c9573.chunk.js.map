{"version":3,"sources":["Tfjs.js","ProgressBar.js","BlockCode.js","PythonCodeBase.js","BluetoothConnect.js","App.js","index.js","uuid.js"],"names":["TfMain","camera","machineId","ipAddress","setProbability","console","log","this","infoTexts","data","label","training","videoPlaying","trained","inputFirst","isTraining","numClasses","completeModel","exampleCount","Array","fill","lastChildAddClass","result","resultConfidence","piboxPy","body","document","undefined","current","bindPage","video","createElement","appendChild","i","div","style","marginBottom","button","innerText","addEventListener","infoText","push","id","train","src","width","height","crossOrigin","tf","mobilenet","layer","getLayer","inputs","outputs","output","loadMobileNet","trainable","predict","start","timer","stop","tagName","play","requestAnimationFrame","animate","bind","pause","cancelAnimationFrame","length","trainButton","getElementById","disabled","labels","model","denseLayer1","dense","inputShape","shape","slice","units","activation","use_bias","kernel_initializer","denseLayer2","add","compile","optimizer","adam","loss","metrics","forEach","e","parseInt","oldLabels","concat","dispose","fit","epochs","batchSize","callbacks","onBatchEnd","batch","logs","acc","then","info","history","save","http","requestInit","method","headers","machine_id","image","IMAGE_SIZE","canvasEl","toString","canvas","className","insertBefore","firstChild","childNodes","removeChild","lastChild","ctx","getContext","imageData","ImageData","dataSync","j","putImageData","nowClass","fromPixels","resizeBilinear","infer","expandDims","toFloat","sub","newX","oldData","draw","logits","predictedClass","as1D","argMax","res","confidence","fontWeight","Math","round","ProgressBar","props","bgcolor","completed","fillerStyles","backgroundColor","borderRadius","textAlign","margin","padding","color","BlockCode","useState","setLabels","ch1OutputType","setCh1OutputType","ch2OutputType","setCh2OutputType","ch1OutputAmount","setCh1OutputAmount","ch2OutputAmount","setCh2OutputAmount","tfFunc","setTfFunc","moveMotorThreshold","checkMove","setCheckMove","piboxUploadBtnName","setPiboxUploadBtnName","checkTime","setCheckTime","probability","useRef","piboxUploadBtn","useEffect","getSetOutput","setOutputContext","getIfContext","chk","context","index","func","noOutputCh1","noOutputCh2","isNaN","parseFloat","r","g","b","getBackContext","back","downloadPy","a","download","front2","middleIf","file","Blob","type","piForm","FormData","append","fetch","mode","cache","credentials","redirect","referrer","sendCommand","uploadUUID","error","sendMoving","alert","Date","now","url","ch1Command","ch2Command","callback","delay","savedCallback","setInterval","clearInterval","useInterval","display","marginLeft","onClick","state","marginRight","ref","onChange","checked","map","key","floor","onMouseDown","addTrainingData","onMouseUp","onMouseLeave","verticalAlign","value","target","newState","fontSize","defaultValue","rgb","onChangeComplete","selectOutputMount","addClass","BluetoothConnect","connectDevice","navigator","bluetooth","requestDevice","filters","services","UUID","SERVICE_ID","device","gatt","connect","server","setState","serverId","getPrimaryService","service","isIphone","webBleConnect","getCharacteristics","characteristics","characteristicsList","isConnected","infoList","preset","uuid","DEVICE_MODEL","WIFI_NAME","IP_ADDRESS","subscribeCharacteristic","readInfoCharacteristic","NOTIFY_MESSAGE","CUSTOM_COMMAND_NOTIFY","filter","indexOf","CUSTOM_INFO_LABEL","item","replace","CUSTOM_INFO","uuid_label","tempCharList","CUSTOM_COMMAND_LABEL","commandList","readCommandLabel","catch","Promise","resolve","getCharacteristicInit","readValue","buffer","ab2str","tempCMDList","find","tempInfoList","event","msg","notify","show","commandOutputShouldRefresh","commandOutput","endsWith","startNotifications","getCharacteristic","PREFIX","CUSTOM_INFO_COUNT","characteristic","customInfoCount","CUSTOM_COMMAND_COUNT","customCommandCount","customInfoList","ending","repeat","customCommandList","all","SERVICE_NAME","INPUT_SEP","CUSTOM_COMMAND_INPUT","buf","String","fromCharCode","apply","Uint8Array","inputWifi","trim","ssid","password","errMsg","wifiLock","setTimeout","sendArray","str2abs","sendSeparately","array","writeValue","wait","sec","waitCamera","resp","ok","str","val","charCodeAt","valArray","split","bufferArray","splice","join","match","h","supportBluetooth","Boolean","window","isBlockCoding","loading","charLength","isAndroid","userAgent","toLowerCase","href","placeholder","c","React","Component","App","ReactDOM","render","module","exports","INPUT"],"mappings":"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","file":"static/js/main.f78c9573.chunk.js","sourcesContent":["// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport * as tf from \"@tensorflow/tfjs\";\n\n// Number of classes to classify\nconst NUM_CLASSES = 2;\n// Webcam Image size. Must be 224.\nconst IMAGE_SIZE = 96;\n\nexport class TfMain {\n  constructor(camera, machineId, ipAddress, setProbability) {\n    console.log(machineId);\n    // Initiate variables\n    this.infoTexts = [];\n    this.data = null;\n    this.label = [];\n    this.training = -1; // -1 when no class is being trained\n    this.videoPlaying = false;\n    this.trained = false;\n    this.inputFirst = true;\n    this.isTraining = false;\n    this.ipAddress = ipAddress;\n    this.numClasses = NUM_CLASSES;\n    this.completeModel = null;\n    this.exampleCount = new Array(NUM_CLASSES).fill(0);\n    this.lastChildAddClass = null;\n    this.machineId = machineId;\n    this.result = -1;\n    this.resultConfidence = 0;\n    this.piboxPy = \"\";\n    this.setProbability = setProbability;\n\n    this.body = document.body;\n    if (camera.current !== undefined) {\n      this.body = camera.current;\n    }\n\n    this.bindPage();\n\n    // // Create video element that will contain the webcam image\n    // this.video = document.createElement(\"video\");\n    // this.video.setAttribute(\"autoplay\", \"\");\n    // this.video.setAttribute(\"playsinline\", \"\");\n\n    // Create image element for picamera streaming\n    this.video = document.createElement(\"img\");\n\n    // Add video element to DOM\n    this.body.appendChild(this.video);\n\n    // Create training buttons and info texts\n    for (let i = 0; i < this.numClasses; i++) {\n      const div = document.createElement(\"div\");\n      this.lastChildAddClass = div;\n      this.body.appendChild(div);\n\n      div.style.marginBottom = \"10px\";\n\n      // Create training button\n      const button = document.createElement(\"button\");\n      button.innerText = \"데이터 추가 - 클래스 \" + (i + 1);\n      //div.appendChild(button);\n\n      // Listen for mouse events when clicking the button\n      button.addEventListener(\"mousedown\", () => (this.training = i));\n      button.addEventListener(\"mouseup\", () => (this.training = -1));\n\n      // Create info text\n      const infoText = document.createElement(\"span\");\n      infoText.innerText = \" 추가된 데이터가 없습니다.\";\n      //div.appendChild(infoText);\n      this.infoTexts.push(infoText);\n    }\n\n    let div = document.createElement(\"div\");\n    this.lastChildAddClass = div;\n    this.body.appendChild(div);\n    div.style.marginBottom = \"10px\";\n\n    // Create training button\n    let button = document.createElement(\"button\");\n    button.innerText = \"학습하기\";\n    button.id = \"trainButton\";\n    div.appendChild(button);\n\n    // Listen for mouse events when clicking the button\n    button.addEventListener(\"mouseup\", () => this.train());\n\n    div = document.createElement(\"div\");\n    this.body.appendChild(div);\n    div.style.marginBottom = \"10px\";\n\n    // Create training button\n    // button = document.createElement(\"button\");\n    // button.innerText = \"학습한 모델 저장\";\n    // button.id = \"modelSave\";\n    // div.appendChild(button);\n\n    // Listen for mouse events when clicking the button\n    // button.addEventListener(\"mouseup\", () => {\n    //   this.download();\n    // });\n\n    //using webcam\n    if (0) {\n      // Setup webcam\n      navigator.mediaDevices\n        .getUserMedia({\n          video: { width: IMAGE_SIZE, height: IMAGE_SIZE },\n          audio: false,\n        })\n        .then((stream) => {\n          this.video.srcObject = stream;\n          this.video.width = IMAGE_SIZE;\n          this.video.height = IMAGE_SIZE;\n\n          this.video.addEventListener(\n            \"playing\",\n            () => (this.videoPlaying = true)\n          );\n          this.video.addEventListener(\n            \"paused\",\n            () => (this.videoPlaying = false)\n          );\n        });\n    }\n    //using picamera\n    if (1) {\n      this.video.src = \"http://\" + this.ipAddress + \":8000/stream.mjpg\";\n      this.video.width = 224;\n      this.video.height = 224;\n      this.video.crossOrigin = \"anonymous\";\n    }\n  }\n\n  addTrainingData(label) {\n    this.training = label;\n  }\n\n  async loadMobileNet() {\n    const mobilenet = await tf.loadLayersModel(\n      `./assets/${IMAGE_SIZE}_0.35/model.json`\n    );\n    const layer = mobilenet.getLayer(\n      IMAGE_SIZE === 160\n        ? \"global_average_pooling2d\"\n        : \"global_average_pooling2d_1\"\n    );\n    return tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n  }\n\n  async bindPage() {\n    this.mobilenet = await this.loadMobileNet();\n    this.mobilenet.trainable = false;\n    this.mobilenet.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3]));\n\n    //tf.setBackend(\"webgl\");\n    //console.log(this.model.summary());\n\n    this.start();\n  }\n\n  start() {\n    if (this.timer) {\n      this.stop();\n    }\n    if (this.video.tagName === \"video\") this.video.play();\n    else this.videoPlaying = true;\n    this.timer = requestAnimationFrame(this.animate.bind(this));\n  }\n\n  stop() {\n    if (this.video.tagName === \"video\") this.video.pause();\n    this.videoPlaying = false;\n    cancelAnimationFrame(this.timer);\n  }\n\n  train() {\n    if (!this.isTraining && this.label.length !== 0) {\n      this.isTraining = true;\n      const trainButton = document.getElementById(\"trainButton\");\n      trainButton.innerText = \"잠시 기다려주세요...\";\n      trainButton.disabled = true;\n      console.log(\"train start\");\n\n      let labels = null;\n      this.model = tf.sequential();\n      this.denseLayer1 = tf.layers.dense({\n        inputShape: this.mobilenet.outputs[0].shape.slice(1),\n        units: 100,\n        activation: \"relu\",\n        use_bias: true,\n        kernel_initializer: \"varianceScaling\",\n      });\n      this.denseLayer2 = tf.layers.dense({\n        units: this.numClasses,\n        activation: \"softmax\",\n        use_bias: false,\n        kernel_initializer: \"varianceScaling\",\n      });\n\n      this.model.add(this.denseLayer1);\n      this.model.add(this.denseLayer2);\n      this.model.compile({\n        optimizer: tf.train.adam(0.0001),\n        loss: \"categoricalCrossentropy\",\n        metrics: [\"accuracy\"],\n      });\n\n      this.label.forEach((e) => {\n        const label = tf.oneHot(\n          tf.tensor1d([parseInt(e)], \"int32\"),\n          this.numClasses\n        );\n        if (labels === null) labels = label;\n        else {\n          const oldLabels = labels;\n          labels = oldLabels.concat(label, 0);\n          oldLabels.dispose();\n        }\n      });\n      //this.data.print();\n      //labels.print();\n      function onBatchEnd(batch, logs) {\n        console.log(\"Accuracy\", logs.acc);\n      }\n      this.model\n        .fit(this.data, labels, {\n          epochs: 20,\n          batchSize: parseInt(this.label.length * 0.4),\n          callbacks: { onBatchEnd },\n        })\n        .then((info) => {\n          console.log(\"Final accuracy\", info.history.acc);\n          this.trained = true;\n          this.isTraining = false;\n          trainButton.innerText = \"학습하기\";\n          trainButton.disabled = false;\n        });\n    }\n  }\n\n  async download() {\n    // const saveButton = document.getElementById(\"modelSave\");\n    // saveButton.innerText = \"잠시 기다려주세요...\";\n    // saveButton.disabled = true;\n    this.completeModel = tf.sequential();\n    this.completeModel.add(this.mobilenet);\n    this.completeModel.add(this.model);\n    try {\n      //await this.completeModel.save(\"downloads://model\");\n      await this.completeModel.save(\n        tf.io.http(\"https://tfjson-to-tflite.unicityclean.com/upload\", {\n          //tf.io.http(\"http://tfjson-to-tflite-2053599458.ap-northeast-2.elb.amazonaws.com/upload\", {\n          requestInit: {\n            method: \"POST\",\n            headers: { machine_id: this.machineId },\n          },\n        })\n      );\n      // saveButton.innerText = \"(성공)학습한 모델 저장\";\n      // saveButton.disabled = false;\n    } catch (error) {\n      // saveButton.innerText = \"(실패)학습한 모델 저장\";\n      // saveButton.disabled = false;\n    }\n  }\n\n  async draw(image, label) {\n    const [width, height] = [IMAGE_SIZE / 2, IMAGE_SIZE / 2];\n    const canvasEl = document.getElementById(\"canvas-\" + label.toString());\n    const canvas = document.createElement(\"canvas\");\n\n    canvas.width = width;\n    canvas.height = height;\n    canvas.className = \"cameraData\";\n    canvasEl.insertBefore(canvas, canvasEl.firstChild);\n    if (canvasEl.childNodes.length > 28)\n      canvasEl.removeChild(canvasEl.lastChild);\n    const ctx = canvas.getContext(\"2d\");\n    const imageData = new ImageData(width, height);\n    const data = image.dataSync();\n    for (let i = 0; i < height * width; ++i) {\n      const j = i * 4;\n      imageData.data[j + 0] = (data[i * 3 + 0] + 1) * 127;\n      imageData.data[j + 1] = (data[i * 3 + 1] + 1) * 127;\n      imageData.data[j + 2] = (data[i * 3 + 2] + 1) * 127;\n      imageData.data[j + 3] = 255;\n    }\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  addClass() {\n    this.exampleCount.push(0);\n    this.numClasses += 1;\n    const div = document.createElement(\"div\");\n\n    this.body.insertBefore(div, this.lastChildAddClass);\n\n    div.style.marginBottom = \"10px\";\n\n    // Create training button\n    const button = document.createElement(\"button\");\n    button.innerText = \"데이터 추가 - 클래스 \" + this.numClasses;\n    //div.appendChild(button);\n    const nowClass = this.numClasses;\n    // Listen for mouse events when clicking the button\n    button.addEventListener(\"mousedown\", () => (this.training = nowClass - 1));\n    button.addEventListener(\"mouseup\", () => (this.training = -1));\n\n    // Create info text\n    const infoText = document.createElement(\"span\");\n    infoText.innerText = \" 추가된 데이터가 없습니다.\";\n    //div.appendChild(infoText);\n    this.infoTexts.push(infoText);\n  }\n\n  async animate() {\n    if (this.videoPlaying) {\n      // Get image data from video element\n      const image = tf.browser.fromPixels(this.video).resizeBilinear([96, 96]);\n\n      let logits;\n      // 'conv_preds' is the logits activation of MobileNet.\n      const infer = () =>\n        tf.tidy(() =>\n          this.model.predict(\n            this.mobilenet.predict(\n              image.expandDims(0).toFloat().div(127).sub(1)\n            )\n          )\n        );\n\n      // Train class if one of the buttons is held down\n      if (this.training !== -1) {\n        const newX = image.expandDims(0).toFloat().div(127).sub(1);\n        // Add current image to classifier\n        if (!this.inputFirst) {\n          const oldData = this.data;\n          this.data = oldData.concat(this.mobilenet.predict(newX), 0);\n          this.label.push(this.training);\n          oldData.dispose();\n        } else {\n          this.data = this.mobilenet.predict(newX);\n          this.label.push(this.training);\n          this.inputFirst = false;\n        }\n        await this.draw(newX.resizeBilinear([48, 48]), this.training);\n        this.exampleCount[this.training] += 1;\n        newX.dispose();\n      }\n\n      //if (hasClass(this.data.map(e => e.length)) > 0) {\n      if (this.trained) {\n        // If classes have been added run predict\n        logits = infer();\n        const predictedClass = logits.as1D().argMax();\n\n        const res = (await predictedClass.data())[0];\n        const confidence = await logits.data();\n        this.setProbability(confidence);\n        for (let i = 0; i < this.numClasses; i++) {\n          // Make the predicted class bold\n          if (res === i) {\n            this.infoTexts[i].style.fontWeight = \"bold\";\n            this.result = i;\n            this.resultConfidence = confidence[i] * 100;\n          } else {\n            this.infoTexts[i].style.fontWeight = \"normal\";\n          }\n          if (this.exampleCount[i] > 0) {\n            this.infoTexts[i].innerText = ` ${\n              this.exampleCount[i]\n            } examples - ${Math.round(confidence[i] * 100)}%`;\n          }\n        }\n        predictedClass.dispose();\n      } else {\n        for (let i = 0; i < this.numClasses; i++) {\n          // The number of examples for each class\n\n          // Update info text\n          if (this.exampleCount[i] > 0) {\n            this.infoTexts[i].innerText = ` ${this.exampleCount[i]} examples`;\n          }\n        }\n      }\n\n      // Dispose image when done\n      image.dispose();\n      if (logits != null) {\n        logits.dispose();\n      }\n    }\n    this.timer = requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\n//window.addEventListener(\"load\", () => new Main());\n","import React from \"react\";\nconst ProgressBar = (props) => {\n  const { bgcolor, completed } = props;\n\n  const containerStyles = {\n    height: 20,\n    width: \"100%\",\n    backgroundColor: \"#e0e0de\",\n    borderRadius: 50,\n    margin: 50,\n  };\n\n  const fillerStyles = {\n    height: \"100%\",\n    width: `${completed}%`,\n    backgroundColor: bgcolor,\n    borderRadius: \"inherit\",\n    textAlign: \"right\",\n    //transition: \"width 0.5s ease-in-out\",\n  };\n\n  const labelStyles = {\n    padding: 5,\n    color: \"white\",\n    fontWeight: \"bold\",\n  };\n\n  return (\n    <div style={containerStyles}>\n      <div style={fillerStyles}>\n        <span style={labelStyles}>{`${completed}%`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { SliderPicker } from \"react-color\";\nimport { TfMain } from \"./Tfjs\";\nimport { front, middle } from \"./PythonCodeBase\";\nimport ProgressBar from \"./ProgressBar\";\n\nexport default function BlockCode(props) {\n  let fileReader;\n  const [labels, setLabels] = useState([\"클래스 1\", \"클래스 2\"]);\n  const [ch1OutputType, setCh1OutputType] = useState(0);\n  const [ch2OutputType, setCh2OutputType] = useState(0);\n  const [ch1OutputAmount, setCh1OutputAmount] = useState([]);\n  const [ch2OutputAmount, setCh2OutputAmount] = useState([]);\n  const [tfFunc, setTfFunc] = useState(null);\n  const [moveMotorThreshold, setMoveMotorThreshold] = useState(80);\n  const [checkMove, setCheckMove] = useState(false);\n  const [piboxUploadBtnName, setPiboxUploadBtnName] = useState(\n    \"블록코드 업로드\"\n  );\n  const [checkTime, setCheckTime] = useState(0);\n  const [probability, setProbability] = useState([0, 0]);\n  const camera = useRef(\"\");\n  const piboxUploadBtn = useRef(\"\");\n\n  useEffect(() => {\n    if (camera.current !== undefined && props.machineId !== \"\") {\n      setTfFunc(\n        new TfMain(camera, props.machineId, props.ipAddress, setProbability)\n      );\n      setCh1OutputAmount(new Array(2).fill(\"\"));\n      setCh2OutputAmount(new Array(2).fill(\"\"));\n    } // eslint-disable-next-line\n  }, [camera, props.machineId]);\n\n  const uploadFile = (file) => {\n    // 파일이 입력되면 먼저 여기로 들어오게된다.\n    // 파일입력이 없음에도 들어오면 바로 컷\n    if (file === undefined) {\n      return;\n    }\n\n    fileReader = new FileReader();\n\n    fileReader.onloadend = () => {\n      const content = fileReader.result;\n      const result = [];\n      content.split(\"\\n\").forEach((label) => {\n        result.push(label.substr(2));\n        console.log(label);\n      });\n      if (result[result.length - 1] === \"\") {\n        result.pop();\n      }\n      setLabels(result);\n      setCh1OutputType(0);\n      setCh2OutputType(0);\n      setCh1OutputAmount(new Array(result.length).fill(\"\"));\n      setCh2OutputAmount(new Array(result.length).fill(\"\"));\n    };\n    fileReader.readAsText(file);\n  };\n\n  function addClass() {\n    tfFunc.addClass();\n    setLabels((state) => [...state, `클래스 ${labels.length + 1}`]);\n    setCh1OutputAmount((state) => [...state, \"\"]);\n    setCh2OutputAmount((state) => [...state, \"\"]);\n    setProbability((state) => [...state, 0]);\n  }\n\n  function getSetOutput() {\n    let setOutputContext = `GPIO.setmode(GPIO.BCM)\npwm = pigpio.pi() \n    `;\n    // 서보모터\n    if (ch1OutputType === 1)\n      setOutputContext += `\npwm.set_mode(18, pigpio.OUTPUT)\n`;\n    else if (ch1OutputType === 2)\n      setOutputContext += `\nGPIO.setup(18,GPIO.OUT) # Channel 1 Speed\nGPIO.setup(23,GPIO.OUT) # Direction of Channel 1\nGPIO.output(23,0) \nm1=GPIO.PWM(18,50)\nm1.start(0)\n`;\n    else if (ch1OutputType === 3 && ch2OutputType !== 3)\n      setOutputContext += `\npix1 = neopixel.NeoPixel(board.D18,12)\n`;\n    // 서보모터\n    if (ch2OutputType === 1)\n      setOutputContext += `\npwm.set_mode(12, pigpio.OUTPUT)\n`;\n    else if (ch2OutputType === 2)\n      setOutputContext += `\nGPIO.setup(12,GPIO.OUT) # Channel 2 Speed\nGPIO.setup(25,GPIO.OUT)\nGPIO.output(25,0) # Direction of Channel 2\nm2=GPIO.PWM(12,50)\nm2.start(0)\n`;\n    else if (ch2OutputType === 3 && ch1OutputType !== 3)\n      setOutputContext += `\npix2 = neopixel.NeoPixel(board.D12,12)\n`;\n    return setOutputContext;\n  }\n  function getIfContext() {\n    let chk = 0;\n    let context = `    # From here. the block code\n    resultIndex = np.argmax(result)\n`;\n    labels.forEach((label, index) => {\n      let func = \"\";\n      let noOutputCh1 = false;\n      let noOutputCh2 = false;\n      if (ch1OutputType === 0) noOutputCh1 = true;\n      else if (ch1OutputType === 1) {\n        if (isNaN(parseFloat(ch1OutputAmount[index]))) noOutputCh1 = true;\n        else\n          func += `pwm.set_servo_pulsewidth(18,${\n            (parseFloat(ch1OutputAmount[index]) / 180) * 2000 + 500\n          }) # 500 => 0 deg / 1500 => 90 deg / 2500 => 180 deg\n        `;\n      }\n      // 서보모터\n      else if (ch1OutputType === 2)\n        func += `m1.ChangeDutyCycle(${ch1OutputAmount[index][1]})\n        GPIO.output(23,${ch1OutputAmount[index][0]}) # Control direction\n        ${\n          ch2OutputType === 2\n            ? \"\"\n            : `time.sleep(${ch1OutputAmount[index][2]})\n        m1.ChangeDutyCycle(0)\n        GPIO.output(23,0)\n        `\n        }\n        `;\n      // 모터\n      else if (ch1OutputType === 3)\n        func += `pix1.fill((${ch1OutputAmount[index].r},${ch1OutputAmount[index].g},${ch1OutputAmount[index].b}))\n        pix1.show()\n        `;\n      // LED\n      else noOutputCh1 = true;\n      if (ch2OutputType === 0) noOutputCh2 = true;\n      else if (ch2OutputType === 1) {\n        if (isNaN(parseFloat(ch2OutputAmount[index]))) noOutputCh2 = true;\n        else\n          func += `pwm.set_servo_pulsewidth(12,${\n            (parseFloat(ch2OutputAmount[index]) / 180) * 2000 + 500\n          }) # 500 => 0 deg / 1500 => 90 deg / 2500 => 180 deg\n        `;\n      }\n      // 서보모터\n      else if (ch2OutputType === 2)\n        func += `m2.ChangeDutyCycle(${ch2OutputAmount[index][1]})\n        GPIO.output(25,${ch2OutputAmount[index][0]}) # Control direction\n        time.sleep(${ch2OutputAmount[index][2]})\n        ${\n          ch1OutputType === 2\n            ? `m1.ChangeDutyCycle(0)\n        GPIO.output(23,0)`\n            : \"\"\n        }\n        m2.ChangeDutyCycle(0)\n        GPIO.output(25,0)\n        `;\n      // 모터\n      else if (ch2OutputType === 3)\n        func += `pix2.fill((${ch2OutputAmount[index].r},${ch2OutputAmount[index].g},${ch2OutputAmount[index].b}))\n        pix2.show()\n        `;\n      // LED\n      else noOutputCh2 = true;\n      if (noOutputCh1 === true && noOutputCh2 === true) return;\n      if (ch1OutputType === 1 && ch1OutputAmount[index] !== \"\")\n        if (chk === 0) {\n          context += `\n    if `;\n          chk = 1;\n        } else\n          context += `\n    elif `;\n      context += `resultIndex == ${index}:\n        ${func}\n        `;\n    });\n    return context;\n  }\n  function getBackContext() {\n    let back = `\n# Clean up\ncv2.destroyAllWindows()\nvideostream.stop()\n`;\n\n    if (ch1OutputType === 1 || ch2OutputType === 1) {\n      back += `pwm.stop()\n`;\n    }\n    if (ch1OutputType === 2) {\n      back += `m1.stop()\n`;\n    }\n    if (ch2OutputType === 2) {\n      back += `m2.stop()\n`;\n    }\n    back += `GPIO.cleanup()\n`;\n    return back;\n  }\n  const downloadPy = async () => {\n    setPiboxUploadBtnName(\"잠시만 기다려주세요...\");\n    piboxUploadBtn.current.disabled = true;\n    await tfFunc.download();\n    //const element = document.createElement(\"a\");\n    const front2 = getSetOutput();\n    const middleIf = getIfContext();\n    const back = getBackContext();\n    const file = new Blob([front, front2, middle, middleIf, back], {\n      type: \"text/plain\",\n    });\n    // element.href = URL.createObjectURL(file);\n    // element.download = \"pibox.py\";\n    // document.body.appendChild(element); // Required for this to work in FireFox\n    //element.click();\n    const piForm = new FormData();\n    piForm.append(\"pibox\", file, \"pibox.py\");\n    try {\n      fetch(\"https://tfjson-to-tflite.unicityclean.com/pibox\", {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n          machine_id: props.machineId,\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: piForm,\n      })\n        .then(() => {\n          props.sendCommand(props.uploadUUID);\n        })\n        .then(() => {\n          setPiboxUploadBtnName(\"블록코드 업로드\");\n          piboxUploadBtn.current.disabled = false;\n        });\n    } catch (error) {\n      console.log(error);\n      setPiboxUploadBtnName(\"업로드 실패, 나중에 다시 시도해주세요.\");\n      piboxUploadBtn.current.disabled = false;\n    }\n\n    return file;\n  };\n\n  //   function downloadBat(os) {\n  //     const element = document.createElement(\"a\");\n  //     const batText = `sshpass -praspberry scp -o StrictHostKeyChecking=no ./model.tflite pi@${props.ipAddress}:/home/pi/tflite/model.tflite\n  // sshpass -praspberry scp -o StrictHostKeyChecking=no ./labels.txt pi@${props.ipAddress}:/home/pi/tflite/labels.txt\n  // sshpass -praspberry scp -o StrictHostKeyChecking=no ./pibox.py pi@${props.ipAddress}:/home/pi/tflite/pibox.py\n  // `;\n  //     const file = new Blob([batText], {\n  //       type: \"text/plain\",\n  //     });\n  //     element.href = URL.createObjectURL(file);\n  //     element.download = os === \"WIN\" ? \"upload.bat\" : \"upload.sh\";\n  //     document.body.appendChild(element); // Required for this to work in FireFox\n  //     element.click();\n  //   }\n\n  const sendMoving = (index) => {\n    if (ch1OutputType === 2 || ch2OutputType === 2) {\n      alert(\"지금은 서보모터와 LED만 동작해 볼 수 있습니다!\");\n    } else {\n      if (checkTime + 1300 < Date.now()) {\n        const url = \"http://\" + props.ipAddress + \":8000/move.html?\";\n        let ch1Command = \"None\";\n        if (\n          (!isNaN(parseFloat(ch1OutputAmount[index])) && ch1OutputType == 1) ||\n          (!isNaN(parseFloat(ch1OutputAmount[index].r)) && ch1OutputType == 3)\n        ) {\n          switch (ch1OutputType) {\n            case 1:\n              ch1Command = \"servo_\" + ch1OutputAmount[index];\n              break;\n            case 3:\n              ch1Command =\n                \"led_\" +\n                ch1OutputAmount[index].r +\n                \"_\" +\n                ch1OutputAmount[index].g +\n                \"_\" +\n                ch1OutputAmount[index].b;\n              break;\n            default:\n              break;\n          }\n        }\n        let ch2Command = \"None\";\n        if (\n          (!isNaN(parseFloat(ch2OutputAmount[index])) && ch2OutputType == 1) ||\n          (!isNaN(parseFloat(ch2OutputAmount[index].r)) && ch2OutputType == 3)\n        ) {\n          switch (ch2OutputType) {\n            case 1:\n              ch2Command = \"servo_\" + ch2OutputAmount[index];\n              break;\n            case 3:\n              ch2Command =\n                \"led_\" +\n                ch2OutputAmount[index].r +\n                \"_\" +\n                ch2OutputAmount[index].g +\n                \"_\" +\n                ch2OutputAmount[index].b;\n              break;\n            default:\n              break;\n          }\n        }\n        console.log(ch2OutputType, ch2OutputAmount);\n        console.log(url + \"ch1=\" + ch1Command + \"&ch2=\" + ch2Command);\n        fetch(url + \"ch1=\" + ch1Command + \"&ch2=\" + ch2Command);\n        setCheckTime(Date.now());\n      }\n    }\n  };\n\n  useInterval(() => {\n    if (checkMove) {\n      if (ch1OutputType === 2 || ch2OutputType === 2) {\n        alert(\"지금은 서보모터와 LED만 동작할 수 있습니다!\");\n        setCheckMove(false);\n      } else {\n        if (\n          moveMotorThreshold <= tfFunc.resultConfidence &&\n          tfFunc.result !== -1\n        ) {\n          sendMoving(tfFunc.result);\n        }\n      }\n    }\n  }, 100);\n\n  const selectOutputMount = (index) => (\n    <div className=\"showOutputType\" key={index}>\n      <span>\n        <h4>채널 1</h4>\n        {ch1OutputType === 1 ? (\n          <div className=\"servomotor\">\n            <p>몇 도 움직일까요? ( 0 ~ 180 )</p>\n            <input\n              style={{ height: 30 }}\n              onChange={(e) => {\n                let value = e.target.value;\n                setCh1OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = value > 180 ? 180 : value < 0 ? 0 : value;\n                  return newState;\n                });\n              }}\n              type=\"number\"\n              value={ch1OutputAmount[index] || \"\"}\n            />\n          </div>\n        ) : ch1OutputType === 2 ? (\n          <div style={{ display: \"inline\" }}>\n            <select\n              style={{\n                backgroundColor: \"#ffffff\",\n                fontSize: 15,\n                borderRadius: 2,\n              }}\n              onChange={(e) => {\n                const value = e.target.value;\n                setCh1OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = [\n                    value,\n                    newState[index][1],\n                    newState[index][2],\n                  ];\n                  return newState;\n                });\n              }}\n              defaultValue={ch1OutputAmount[index][0]}\n            >\n              <option value=\"0\">정방향</option>\n              <option value=\"1\">역방향</option>\n            </select>\n            <div style={{ display: \"flex\" }}>\n              <div>\n                <h5 style={{ textAlign: \"center\" }}>속도 ( 0 ~ 100 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh1OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [\n                        newState[index][0],\n                        value,\n                        newState[index][2],\n                      ];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch1OutputAmount[index][1]}\n                />\n              </div>\n              <div style={{ marginLeft: \"10%\" }}>\n                <h5 style={{ textAlign: \"center\" }}>시간 ( 1 {\"=>\"} 1초 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh1OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [\n                        newState[index][0],\n                        newState[index][1],\n                        value,\n                      ];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch1OutputAmount[index][2]}\n                />\n              </div>\n            </div>\n          </div>\n        ) : ch1OutputType === 3 ? (\n          <div style={{ display: \"inline\" }}>\n            <SliderPicker\n              color={ch1OutputAmount[index]}\n              onChange={(value) => {\n                setCh1OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = value.rgb;\n                  return newState;\n                });\n              }}\n            />\n          </div>\n        ) : (\n          <div style={{ display: \"flex\" }}>출력 종류를 먼저 선택하세요</div>\n        )}\n      </span>\n      <span>\n        <h4>채널 2</h4>\n        {ch2OutputType === 1 ? (\n          <div className=\"servomotor\">\n            몇 도 움직일까요? ( 0 ~ 180 )<br />\n            <input\n              style={{ height: 30 }}\n              onChange={(e) => {\n                let value = e.target.value;\n                setCh2OutputAmount((state) => {\n                  const newState = [...state];\n\n                  newState[index] = value > 180 ? 180 : value < 0 ? 0 : value;\n                  return newState;\n                });\n              }}\n              type=\"number\"\n              value={ch2OutputAmount[index] || \"\"}\n            />\n          </div>\n        ) : ch2OutputType === 2 ? (\n          <div style={{ display: \"inline\" }}>\n            <select\n              style={{\n                backgroundColor: \"#ffffff\",\n                fontSize: 15,\n                borderRadius: 2,\n              }}\n              onChange={(e) => {\n                const value = e.target.value;\n                setCh2OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = [\n                    value,\n                    newState[index][1],\n                    newState[index][2],\n                  ];\n                  return newState;\n                });\n              }}\n              defaultValue={ch2OutputAmount[index][0]}\n            >\n              <option value=\"0\">정방향</option>\n              <option value=\"1\">역방향</option>\n            </select>\n            <div style={{ display: \"flex\" }}>\n              <div>\n                <h5 style={{ textAlign: \"center\" }}>속도 ( 0 ~ 100 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh2OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [\n                        newState[index][0],\n                        value,\n                        newState[index][2],\n                      ];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch2OutputAmount[index][1]}\n                />\n              </div>\n              <div style={{ marginLeft: \"10%\" }}>\n                <h5 style={{ textAlign: \"center\" }}>시간 ( 1 {\"=>\"} 1초 ) </h5>\n                <input\n                  style={{ height: 30 }}\n                  onChange={(e) => {\n                    const value = e.target.value;\n                    setCh2OutputAmount((state) => {\n                      const newState = [...state];\n                      newState[index] = [\n                        newState[index][0],\n                        newState[index][1],\n                        value,\n                      ];\n                      return newState;\n                    });\n                  }}\n                  type=\"number\"\n                  value={ch2OutputAmount[index][2]}\n                />\n              </div>\n            </div>\n          </div>\n        ) : ch2OutputType === 3 ? (\n          <div style={{ display: \"inline\" }}>\n            <SliderPicker\n              color={ch2OutputAmount[index]}\n              onChangeComplete={(value) => {\n                setCh2OutputAmount((state) => {\n                  const newState = [...state];\n                  newState[index] = value.rgb;\n                  return newState;\n                });\n              }}\n            />\n          </div>\n        ) : (\n          <div style={{ display: \"flex\" }}>출력 종류를 먼저 선택하세요</div>\n        )}\n      </span>\n      <span>\n        <button onClick={() => sendMoving(index)}>움직여보기!</button>\n      </span>\n    </div>\n  );\n\n  const selectOutputType = () => (\n    <div\n      className=\"blocks\"\n      style={{ display: \"inline\", width: \"49%\", marginLeft: \"1%\" }}\n    >\n      <div className=\"block\">\n        <div>\n          <div className=\"Out-put-01\">Output1</div>\n          <div>\n            <span\n              className=\"output-servo\"\n              onClick={() => {\n                if (ch1OutputType === 1) {\n                  setCh1OutputType(0);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                } else {\n                  setCh1OutputType(1);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill(\"0\");\n                  });\n                }\n              }}\n            >\n              Servo Motor\n              {/* <img className={ch1OutputType === 1 ? \"outputPicSel\" : \"outputPic\"} src={servomotor} alt=\"servomotor\" /> */}\n            </span>\n\n            <span\n              onClick={() => {\n                if (ch1OutputType === 2) {\n                  setCh1OutputType(0);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                } else {\n                  setCh1OutputType(2);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill([\"0\", \"50\", \"0.5\"]);\n                  });\n                }\n              }}\n              className=\"output-servo\"\n            >\n              DC Motor\n              {/* <img className={ch1OutputType === 2 ? \"outputPicSel\" : \"outputPic\"} src={motor} alt=\"motor\" /> */}\n            </span>\n\n            <span\n              onClick={() => {\n                if (ch1OutputType === 3) {\n                  setCh1OutputType(0);\n                  setCh1OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                } else {\n                  if (ch2OutputType !== 3) {\n                    setCh1OutputType(3);\n                    setCh1OutputAmount((state) => {\n                      return new Array(state.length).fill({\n                        r: 255,\n                        g: 255,\n                        b: 255,\n                        a: 1,\n                      });\n                    });\n                  } else {\n                    alert(\"LED 출력은 1개의 채널만 가능합니다.\");\n                  }\n                }\n              }}\n              className=\"output-servo\"\n            >\n              LED\n              {/* <img className={ch1OutputType === 3 ? \"outputPicSel\" : \"outputPic\"} src={led} alt=\"led\" /> */}\n            </span>\n          </div>\n        </div>\n        <div>\n          <div className=\"Out-put-01\">Output2</div>\n          <div>\n            <span\n              className=\"output-servo\"\n              onClick={() => {\n                if (ch2OutputType === 1) {\n                  setCh2OutputType(0);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                } else {\n                  setCh2OutputType(1);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill(\"0\");\n                  });\n                }\n              }}\n            >\n              Servo Motor\n              {/* <img className={ch2OutputType === 1 ? \"outputPicSel\" : \"outputPic\"} src={servomotor} alt=\"servomotor\"/> */}\n            </span>\n\n            <span\n              onClick={() => {\n                if (ch2OutputType === 2) {\n                  setCh2OutputType(0);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                } else {\n                  setCh2OutputType(2);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill([\"0\", \"50\", \"0.5\"]);\n                  });\n                }\n              }}\n              className=\"output-servo\"\n            >\n              DC Motor\n              {/* <img\n                className={ch2OutputType === 2 ? \"outputPicSel\" : \"outputPic\"}\n                src={motor}\n                alt=\"motor\"\n              /> */}\n            </span>\n\n            <span\n              onClick={() => {\n                if (ch2OutputType === 3) {\n                  setCh2OutputType(0);\n                  setCh2OutputAmount((state) => {\n                    return new Array(state.length).fill(\"\");\n                  });\n                } else {\n                  if (ch1OutputType !== 3) {\n                    setCh2OutputType(3);\n                    setCh2OutputAmount((state) => {\n                      return new Array(state.length).fill({\n                        r: 255,\n                        g: 255,\n                        b: 255,\n                        a: 1,\n                      });\n                    });\n                  } else {\n                    alert(\"LED 출력은 1개의 채널만 가능합니다.\");\n                  }\n                }\n              }}\n              className=\"output-servo\"\n            >\n              LED\n              {/* <img\n                className={ch2OutputType === 3 ? \"outputPicSel\" : \"outputPic\"}\n                src={led}\n                alt=\"led\"\n              /> */}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const cameraPreviewWithButtons = () => (\n    //아웃풋 종류 보여줌\n    <div style={{ display: \"flex\" }}>\n      <div\n        className=\"blocks\"\n        style={{ display: \"inline\", width: \"49%\", marginRight: \"1%\" }}\n      >\n        <div className=\"block\" ref={camera}></div>\n\n        <div className=\"block\">\n          <input\n            type=\"checkbox\"\n            onChange={() => setCheckMove(!checkMove)}\n            checked={checkMove}\n          />\n          {\"PLAi 동작하기\"}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"connect-panel panel\">\n      <img src=\"img/icon_arrow_back.svg\" className=\"Icon-arrow_back\"></img>\n      {false ? (\n        <div>\n          <p>\n            라벨 :{\" \"}\n            <input\n              type=\"file\"\n              accept=\".txt\"\n              onChange={(e) => uploadFile(e.target.files[0])}\n            />\n          </p>\n        </div>\n      ) : null}\n      <div className=\"training-label\">학습하기</div>\n      <div>{selectOutputType()}</div>\n      <div>{cameraPreviewWithButtons()}</div>\n      <div className=\"label-output\">\n        <div className=\"blocks-container\">\n          <div>\n            {labels.map((label, index) => (\n              <div key={label}>\n                <div className=\"blocks\">\n                  <div className=\"block\">\n                    <span>{label}</span>\n                    <ProgressBar\n                      bgcolor={\"#00695c\"}\n                      completed={Math.floor(probability[index] * 100)}\n                    />\n                  </div>\n\n                  <img\n                    src=\"img/icon_video.svg\"\n                    className=\"Icon-awesome-video\"\n                    onMouseDown={() => {\n                      tfFunc.addTrainingData(index);\n                    }}\n                    onMouseUp={() => {\n                      tfFunc.addTrainingData(-1);\n                    }}\n                    onMouseLeave={() => {\n                      tfFunc.addTrainingData(-1);\n                    }}\n                  ></img>\n                  <span>\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        width: \"50%\",\n                        textAlign: \"center\",\n                      }}\n                      id={\"canvas-\" + index.toString()}\n                    ></span>\n                  </span>\n\n                  <span>\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        width: \"50%\",\n                        verticalAlign: \"top\",\n                      }}\n                    >\n                      {selectOutputMount(index)}\n                    </span>\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div className=\"block\">\n        <button onClick={() => addClass()}>클래스 추가 +</button>\n      </div>\n      <div className=\"block\">\n        <button ref={piboxUploadBtn} onClick={() => downloadPy()}>\n          {piboxUploadBtnName}\n        </button>\n      </div>\n      {/* <div>\n        <h4>\n          블록이 완성되었다면{\" \"}\n          <span style={{ color: \"blue\", cursor: \"pointer\" }} onClick={() => downloadPy()}>\n            코드 다운로드\n          </span>{\" \"}\n        </h4>\n      </div> */}\n      {/* <div>\n        <h4>\n          <span style={{ color: \"blue\", cursor: \"pointer\" }} onClick={() => downloadBat(\"WIN\")}>\n            코드 업로드 프로그램(윈도우)\n          </span>\n          <br />\n          코드와 업로드 프로그램 파일은 모델파일을 압축푼 폴더와 같은 폴더에 넣어주세요.\n        </h4>\n        <p>\n          초기 비밀번호 : raspberry\n          <br />\n        </p>\n      </div> */}\n    </div>\n  );\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","export const front = `\n## pibox TFLITE\nimport os\nimport argparse\nimport cv2\nimport numpy as np\nimport sys\nimport time\nfrom threading import Thread\nimport importlib.util\n\n## 출력을 위한 import\nimport RPi.GPIO as GPIO\nimport pigpio\nimport time\nimport board\nimport neopixel\n\n`;\n\nexport const middle = `\n# 카메라 오브젝트\nclass VideoStream:\n    def __init__(self,resolution=(320,240),framerate=3): # 원래는 640,480 그리고 30 framerate\n        # 파이 카메라를 시작합니다.\n        self.stream = cv2.VideoCapture(0)\n        ret = self.stream.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))\n        ret = self.stream.set(3,resolution[0])\n        ret = self.stream.set(4,resolution[1])\n            \n        # 첫번째 사진을 불러옵니다.\n        (self.grabbed, self.frame) = self.stream.read()\n\n\t    # 멈출 수 있도록 stopped를 설정해줍니다.\n        self.stopped = False\n\n    def start(self):\n\t    # 비디오 스트림에서 프레임을 읽어오는 쓰레드를 시작합니다.\n        Thread(target=self.update,args=()).start()\n        return self\n\n    def update(self):\n        # 쓰레드가 멈출 때 까지 계속 스트림을 실행합니다.\n        while True:\n            # 카메라가 멈추면 스트림을 멈춥니다.\n            if self.stopped:\n                # 카메라 리소스를 닫습니다.\n                self.stream.release()\n                return\n\n            # 멈춘것이 아니라면 프레임을 가져옵니다.\n            (self.grabbed, self.frame) = self.stream.read()\n\n    def read(self):\n\t    # 가장 최근 프레임을 가져옵니다.\n        return self.frame\n\n    def stop(self):\n\t    # 카메라 쓰레드를 정지합니다.\n        self.stopped = True\n\n# 입력 파라미터를 정의합니다.\nparser = argparse.ArgumentParser()\nparser.add_argument('--modeldir', help='Folder the .tflite file is located in',\n                    required=True)\nparser.add_argument('--graph', help='Name of the .tflite file, if different than model.tflite',\n                    default='model.tflite')\nparser.add_argument('--labels', help='Name of the labelmap file, if different than labels.txt',\n                    default='labels.txt')\nparser.add_argument('--threshold', help='Minimum confidence threshold for displaying detected objects',\n                    default=0.5)\nparser.add_argument('--resolution', help='Desired webcam resolution in WxH. If the webcam does not support the resolution entered, errors may occur.',\n                    default='320x240') # 원래는 1280x720 속도를 위해 낮춤\nparser.add_argument('--edgetpu', help='Use Coral Edge TPU Accelerator to speed up detection',\n                    action='store_true',default=False)\n\nargs = parser.parse_args()\n\nMODEL_NAME = args.modeldir\nGRAPH_NAME = args.graph\nLABELMAP_NAME = args.labels\nmin_conf_threshold = float(args.threshold)\nresW, resH = args.resolution.split('x')\nimW, imH = int(resW), int(resH) # 라즈베리파이 제로 + 파이카메라에서는 224,224 가 아주 쬐에에에끔 빠릅니다.\nuse_TPU = args.edgetpu\n\n# 텐서플로우 라이브러리를 가져옵니다.\n# 텐서플로우 라이브러리가 없다면, tflite_runtime 을 가져옵니다.\n# 코랄 TPU를 사용한다면, TPU 용 라이브러리를 가져옵니다. (import the load_delegate library)\npkg = importlib.util.find_spec('tensorflow')\nif pkg is None:\n    from tflite_runtime.interpreter import Interpreter\n    if use_TPU:\n        from tflite_runtime.interpreter import load_delegate\nelse:\n    from tensorflow.lite.python.interpreter import Interpreter\n    if use_TPU:\n        from tensorflow.lite.python.interpreter import load_delegate\n\n# TPU를 사용한다면 TPU 모델을 가져옵니다.\nif use_TPU:\n    # 'edgetpu.tflite'가 TPU를 사용할 때의 기본 경로입니다.\n    if (GRAPH_NAME == 'model.tflite'):\n        GRAPH_NAME = 'edgetpu.tflite'       \n\n# 작업 경로와 현재 경로를 일치시킵니다.\nCWD_PATH = os.getcwd()\n\n# 모델 경로를 설정합니다.\nPATH_TO_CKPT = os.path.join(CWD_PATH,MODEL_NAME,GRAPH_NAME)\n\n# 라벨 경로를 설정합니다.\nPATH_TO_LABELS = os.path.join(CWD_PATH,MODEL_NAME,LABELMAP_NAME)\n\n# 라벨을 가져옵니다.\nwith open(PATH_TO_LABELS, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# 첫번째 라벨이 ??? 인 경우가 있어 그럴 경우 제거합니다.\nif labels[0] == '???':\n    del(labels[0])\n\n# 텐서플로우 모델을 가져옵니다. TPU를 쓸 경우 TPU 모델로 가져옵니다.\nif use_TPU:\n    interpreter = Interpreter(model_path=PATH_TO_CKPT,\n                              experimental_delegates=[load_delegate('libedgetpu.so.1.0')])\n    print(PATH_TO_CKPT)\nelse:\n    interpreter = Interpreter(model_path=PATH_TO_CKPT)\n\ninterpreter.allocate_tensors()\n\n# 로드된 모델의 정보를 가져옵니다.\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\nheight = input_details[0]['shape'][1]\nwidth = input_details[0]['shape'][2]\n#print(\"가로\")\n#print(width)\n#print(\"세로\")\n#print(height)\n# 입력이 소수인지 아닌지 판단합니다.\nfloating_model = (input_details[0]['dtype'] == np.float32)\n\ninput_mean = 127.5\ninput_std = 127.5\n\n# 연산 프레임을 체크하기 위한 변수를 할당합니다.\nframe_rate_calc = 1\nfreq = cv2.getTickFrequency()\n\n# 상단에서 정의한 비디오 스트림을 시작합니다.\nvideostream = VideoStream(resolution=(imW,imH),framerate=30).start() \ntime.sleep(1)\n\n# 프레임으로 연산을 시작합니다.\nwhile True:\n\n    # 연산 프레임을 위한 시간 체크 변수를 할당합니다.\n    t1 = cv2.getTickCount()\n\n    # 비디오스트림에서 프레임을 읽어옵니다.\n    frame1 = videostream.read()\n\n    # 입력에 넣을 수 있도록 해상도를 변경합니다.\n    frame = frame1.copy()\n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    # 위에서 input을 224,224로 설정했다면 아래 줄은 넘어가도 됩니다..\n    frame_resized = cv2.resize(frame_rgb, (width, height)) \n    input_data = np.expand_dims(frame_resized, axis=0)\n\n    # 입력이 소수라면 소수로 바꿔줍니다.\n    if floating_model:\n        input_data = (np.float32(input_data) - input_mean) / input_std\n\n    # 로드된 모델에 입력을 넣어 결과를 가져옵니다.\n    interpreter.set_tensor(input_details[0]['index'],input_data)\n    interpreter.invoke()\n    result=interpreter.get_tensor(output_details[0]['index'])[0]\n    print(labels[np.argmax(result)])\n    #print(result)\n    # 초당 연산 프레임을 계산합니다.\n    t2 = cv2.getTickCount()\n    time1 = (t2-t1)/freq\n    frame_rate_calc= 1/time1\n    #print(frame_rate_calc)\n`;\n","import React from \"react\";\nimport Notifications, { notify } from \"react-notify-toast\";\nimport WifiSSH from \"./WifiSSH\";\nimport BlockCode from \"./BlockCode\";\nimport \"./App.css\";\nimport UUID from \"./uuid\";\n\nexport default class BluetoothConnect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      supportBluetooth: Boolean(window.navigator.bluetooth),\n      isConnected: false,\n      serverId: \"\",\n      ssid: \"\",\n      password: \"\",\n      key: \"pibox\",\n      wifiLock: false,\n      characteristicsList: [],\n      infoList: [],\n      commandList: [],\n      isBlockCoding: false,\n      commandOutput: \"\",\n      commandOutputShouldRefresh: false,\n      loading: null,\n      charLength: -1,\n      customInfoCount: 0,\n      customCommandCount: 0,\n      isAndroid:\n        navigator.userAgent.indexOf(\"Android\") > -1 ||\n        navigator.userAgent.indexOf(\"Adr\") > -1,\n      isIphone:\n        navigator.userAgent.indexOf(\"iPhone\") > -1 ||\n        navigator.userAgent.indexOf(\"iphone\") > -1,\n    };\n    for (let i in UUID) {\n      UUID[i] = UUID[i].toLowerCase();\n    }\n  }\n\n  componentDidMount() {}\n\n  connectDevice = () => {\n    navigator.bluetooth\n      .requestDevice({\n        filters: [\n          {\n            services: [UUID.SERVICE_ID],\n          },\n        ],\n      })\n      .then((device) => {\n        //GO loading screen\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        this.setState({ serverId: server.device.id });\n        return server.getPrimaryService(UUID.SERVICE_ID);\n      })\n      .then((service) => {\n        if (this.state.isIphone) {\n          // iOS webBLE does not support getCharacteristics()\n          console.log(\"ios webBLE\");\n          return this.webBleConnect(service);\n        } else {\n          return service.getCharacteristics();\n        }\n      })\n      .then(async (characteristics) => {\n        console.log(\"Connected!\");\n        let characteristicsList = characteristics;\n        this.setState({ isConnected: true });\n        let infoList = [\n          {\n            preset: true,\n            uuid: \"\",\n            label: \"Device ID\",\n            value: this.state.serverId,\n          },\n          {\n            preset: true,\n            uuid: UUID.DEVICE_MODEL,\n            label: \"Model\",\n            value: \" \",\n          },\n          {\n            preset: true,\n            uuid: UUID.WIFI_NAME,\n            label: \"Wifi\",\n            value: \"...\",\n          },\n          {\n            preset: true,\n            uuid: UUID.IP_ADDRESS,\n            label: \"IP Address\",\n            value: \"...\",\n          },\n        ];\n\n        await this.subscribeCharacteristic(\n          UUID.WIFI_NAME,\n          infoList,\n          characteristicsList\n        );\n        await this.subscribeCharacteristic(\n          UUID.IP_ADDRESS,\n          infoList,\n          characteristicsList\n        );\n        await this.readInfoCharacteristic(\n          UUID.DEVICE_MODEL,\n          infoList,\n          characteristicsList\n        );\n        await this.subscribeCharacteristic(\n          UUID.NOTIFY_MESSAGE,\n          infoList,\n          characteristicsList\n        );\n        await this.subscribeCharacteristic(\n          UUID.CUSTOM_COMMAND_NOTIFY,\n          infoList,\n          characteristicsList\n        );\n\n        characteristicsList\n          .filter((i) => i.uuid.indexOf(UUID.CUSTOM_INFO_LABEL) >= 0)\n          .map((item) =>\n            infoList.push({\n              uuid: item.uuid.replace(UUID.CUSTOM_INFO_LABEL, UUID.CUSTOM_INFO),\n              uuid_label: item.uuid,\n              label: \"-\",\n              value: \"\",\n            })\n          );\n        for (let i = 0; i < infoList.length; i++) {\n          if (infoList[i].preset) continue;\n          await this.readInfoCharacteristic(\n            infoList[i].uuid_label,\n            infoList,\n            characteristicsList\n          );\n          await this.subscribeCharacteristic(\n            infoList[i].uuid,\n            infoList,\n            characteristicsList\n          );\n        }\n        let tempCharList = [];\n        characteristicsList\n          .filter((i) => i.uuid.indexOf(UUID.CUSTOM_COMMAND_LABEL) >= 0)\n          .map((item) =>\n            tempCharList.push({\n              uuid: item.uuid,\n              label: \"...\",\n            })\n          );\n        let commandList = tempCharList;\n        for (let i = 0; i < commandList.length; i++) {\n          await this.readCommandLabel(\n            commandList[i].uuid,\n            commandList,\n            characteristicsList\n          );\n        }\n        this.setState({\n          characteristicsList: characteristicsList,\n          infoList: infoList,\n          commandList: commandList,\n        });\n        //console.log(commandList);\n        // 0: {uuid: \"00000000-0000-0000-0000-fd2bcccc0001\", label: \"shutdown\"}\n        // 1: {uuid: \"00000000-0000-0000-0000-fd2bcccc0002\", label: \"reboot\"}\n        // 2: {uuid: \"00000000-0000-0000-0000-fd2bcccc0003\", label: \"start\"}\n        // 3: {uuid: \"00000000-0000-0000-0000-fd2bcccc0004\", label: \"stop\"}\n        // 4: {uuid: \"00000000-0000-0000-0000-fd2bcccc0005\", label: \"upload\"}\n        // 5: {uuid: \"00000000-0000-0000-0000-fd2bcccc0006\", label: \"camStart\"}\n\n        // loading close\n      })\n      .catch(console.log);\n  };\n\n  readCommandLabel = (uuid, commandList, characteristicsList) => {\n    //console.log(\"readCommandLabel\");\n    return new Promise((resolve) => {\n      this.getCharacteristicInit(uuid, characteristicsList)\n        .readValue()\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then((label) => {\n          let tempCMDList = commandList;\n          tempCMDList.find((i) => i.uuid === uuid).label = label;\n          this.setState({ commandList: tempCMDList }, resolve());\n        });\n    });\n  };\n\n  readInfoCharacteristic = (uuid, infoList, characteristicsList) => {\n    //console.log(\"readInfoCharacteristic\");\n    return new Promise((resolve) => {\n      this.getCharacteristicInit(uuid, characteristicsList)\n        .readValue()\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then((value) => {\n          const tempInfoList = infoList;\n          if (tempInfoList.find((i) => i.uuid === uuid)) {\n            tempInfoList.find((i) => i.uuid === uuid).value = value;\n          }\n          if (tempInfoList.find((i) => i.uuid_label === uuid)) {\n            tempInfoList.find((i) => i.uuid_label === uuid).label = value;\n          }\n          if (tempInfoList !== this.state.infoList)\n            this.setState({ infoList: tempInfoList }, resolve());\n          else resolve();\n        });\n    });\n  };\n\n  subscribeCharacteristic = (uuid, infoList, characteristicsList) => {\n    //console.log(\"subscribeCharacteristic\");\n    return new Promise(async (resolve) => {\n      this.getCharacteristicInit(uuid, characteristicsList).addEventListener(\n        \"characteristicvaluechanged\",\n        (event) => {\n          if (event.target.uuid === UUID.NOTIFY_MESSAGE) {\n            let msg = this.ab2str(event.target.value.buffer);\n            notify.show(msg, \"custom\", 3000, \"teal\");\n          } else if (event.target.uuid === UUID.CUSTOM_COMMAND_NOTIFY) {\n            let msg = this.ab2str(event.target.value.buffer);\n            if (this.state.commandOutputShouldRefresh) {\n              this.setState(\n                { commandOutputShouldRefresh: false, commandOutput: \"\" },\n                () => {\n                  let output = this.state.commandOutput + msg;\n                  if (output.endsWith(\"&#&\")) {\n                    output = output.replace(\"&#&\", \"\");\n                    this.setState({ commandOutputShouldRefresh: true });\n                  }\n                  this.setState({ commandOutput: output });\n                }\n              );\n            } else {\n              let output = this.state.commandOutput + msg;\n              if (output.endsWith(\"&#&\")) {\n                output = output.replace(\"&#&\", \"\");\n                this.setState({ commandOutputShouldRefresh: true });\n              }\n              this.setState({ commandOutput: output });\n            }\n          } else {\n            let value = this.ab2str(event.target.value.buffer);\n            let tempInfoList = infoList;\n            if (tempInfoList.find((i) => i.uuid === uuid)) {\n              tempInfoList.find((i) => i.uuid === uuid).value = value;\n            }\n            if (tempInfoList.find((i) => i.uuid_label === uuid)) {\n              tempInfoList.find((i) => i.uuid_label === uuid).label = value;\n            }\n            this.setState({ infoList: tempInfoList });\n          }\n        }\n      );\n      await this.getCharacteristicInit(\n        uuid,\n        characteristicsList\n      ).startNotifications();\n      resolve();\n    });\n  };\n\n  webBleConnect = (service) => {\n    return new Promise(async (resolve) => {\n      await service\n        .getCharacteristic(UUID.PREFIX + UUID.CUSTOM_INFO_COUNT)\n        .then((characteristic) => characteristic.readValue())\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then(parseInt)\n        .then((value) => {\n          console.log(\"custom-info-count \" + value);\n          this.setState({ customInfoCount: value });\n        });\n      await service\n        .getCharacteristic(UUID.PREFIX + UUID.CUSTOM_COMMAND_COUNT)\n        .then((characteristic) => characteristic.readValue())\n        .then((i) => i.buffer)\n        .then(this.ab2str)\n        .then(parseInt)\n        .then((value) => {\n          console.log(\"custom-command-count \" + value);\n          this.setState({ customCommandCount: value }, () => {\n            let customInfoList = [];\n            for (let index = 0; index < this.state.customInfoCount; index++) {\n              let ending = (index + 1).toString(16);\n              ending = \"0\".repeat(4 - ending.length) + ending;\n              customInfoList.push(UUID.PREFIX + UUID.CUSTOM_INFO + ending);\n              customInfoList.push(\n                UUID.PREFIX + UUID.CUSTOM_INFO_LABEL + ending\n              );\n            }\n            let customCommandList = [];\n            for (\n              let index = 0;\n              index < this.state.customCommandCount;\n              index++\n            ) {\n              let ending = (index + 1).toString(16);\n              ending = \"0\".repeat(4 - ending.length) + ending;\n              customCommandList.push(\n                UUID.PREFIX + UUID.CUSTOM_COMMAND_LABEL + ending\n              );\n            }\n            resolve(\n              Promise.all([\n                service.getCharacteristic(UUID.SERVICE_NAME),\n                service.getCharacteristic(UUID.DEVICE_MODEL),\n                service.getCharacteristic(UUID.WIFI_NAME),\n                service.getCharacteristic(UUID.IP_ADDRESS),\n                service.getCharacteristic(UUID.NOTIFY_MESSAGE),\n                service.getCharacteristic(UUID.INPUT_SEP),\n                service.getCharacteristic(UUID.CUSTOM_COMMAND_INPUT),\n                service.getCharacteristic(UUID.CUSTOM_COMMAND_NOTIFY),\n                ...customInfoList.map((i) => service.getCharacteristic(i)),\n                ...customCommandList.map((i) => service.getCharacteristic(i)),\n              ])\n            );\n          });\n        });\n    });\n  };\n  ab2str = (buf) => {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n  };\n\n  getCharacteristic = (uuid) => {\n    return this.state.characteristicsList.find((i) => i.uuid === uuid);\n  };\n\n  getCharacteristicInit = (uuid, characteristicsList) => {\n    return characteristicsList.find((i) => i.uuid === uuid);\n  };\n\n  inputWifi = () => {\n    this.setState(\n      {\n        key: this.state.key.trim().replace(/\\|/g, \"*\"),\n        ssid: this.state.ssid.trim().replace(/\\|/g, \"*\"),\n        password: this.state.password.trim().replace(/\\|/g, \"*\"),\n      },\n      () => {\n        let errMsg;\n        if (this.state.ssid === \"\") {\n          errMsg = \"SSID cannot be empty.\";\n        }\n        if (this.state.password === \"\") {\n          errMsg = \"Password cannot be empty.\";\n        }\n        if (errMsg) {\n          notify.show(errMsg, \"custom\", 3000, \"teal\");\n          return;\n        }\n        this.setState({ wifiLock: true }, () =>\n          setTimeout(() => {\n            this.setState({ wifiLock: false });\n          }, 4000)\n        );\n\n        let sendArray = this.str2abs(\n          `${this.state.key}%&%${this.state.ssid}%&%${this.state.password}&#&`\n        );\n        this.sendSeparately(sendArray, UUID.INPUT_SEP);\n      }\n    );\n  };\n  sendCommand = (uuid) => {\n    let sendArray = this.str2abs(`${this.state.key}%&%${uuid.slice(-4)}&#&`);\n    this.sendSeparately(sendArray, UUID.CUSTOM_COMMAND_INPUT);\n  };\n  sendSeparately = async (array, uuid) => {\n    for (const i in array) {\n      await this.getCharacteristic(uuid).writeValue(array[i]);\n      await this.wait(0.4);\n    }\n  };\n  wait = async (sec) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(true);\n      }, 1000 * sec);\n    });\n  };\n  waitCamera = async () => {\n    let chk = true;\n    if (\n      this.state.infoList.find((i) => i.label === \"IP Address\") !== undefined &&\n      this.state.infoList.find((i) => i.label === \"IP Address\").value !== \"\"\n    ) {\n      while (chk) {\n        await fetch(\n          \"http://\" +\n            this.state.infoList.find((i) => i.label === \"IP Address\").value +\n            \":8000/index.html\"\n        )\n          // eslint-disable-next-line\n          .then(async (resp) => {\n            if (!resp.ok) {\n              await this.wait(0.5);\n            } else {\n              chk = false;\n            }\n          })\n          .catch(async () => {\n            await this.wait(0.5);\n          });\n      }\n      return true;\n    } else {\n      alert(\"와이파이가 연결되어있지 않습니다.\");\n      return false;\n    }\n  };\n  str2abs = (str) => {\n    let val = \"\";\n    for (let i = 0; i < str.length; i++) {\n      if (val === \"\") {\n        val = str.charCodeAt(i).toString(16);\n      } else {\n        val += \",\" + str.charCodeAt(i).toString(16);\n      }\n    }\n    let valArray = val.split(\",\");\n    let bufferArray = [];\n    while (valArray.length > 0) {\n      let value = valArray.splice(0, 20).join(\",\");\n      bufferArray.push(\n        new Uint8Array(\n          value.match(/[\\da-f]{2}/gi).map(function (h) {\n            return parseInt(h, 16);\n          })\n        ).buffer\n      );\n    }\n    return bufferArray;\n  };\n\n  render() {\n    return (\n      <div className=\"BluetoothConnect\">\n        <div id=\"app\">\n          <Notifications />\n          <img src=\"img/logo.svg\" className=\"logo\"></img>\n          <div className=\"panel-container\">\n            {!this.state.supportBluetooth ? (\n              <div className=\"connect-panel panel\">\n                <div className=\"panel-title\">Cannot find web bluetooth.</div>\n                <p>\n                  Please make sure your device and browser support web\n                  bluetooth. Please visit{\" \"}\n                  <a\n                    href=\"https://github.com/WebBluetoothCG/web-bluetooth/blob/master/implementation-status.md\"\n                    target=\"_brank\"\n                  >\n                    Here\n                  </a>{\" \"}\n                  to check web-bluetooth compatibility.\n                </p>\n              </div>\n            ) : null}\n            {!this.state.isConnected && this.state.supportBluetooth ? (\n              <div className=\"connect-panel panel\">\n                <img\n                  src=\"img/icon_arrow_back.svg\"\n                  className=\"Icon-arrow_back\"\n                ></img>\n                <div className=\"character-button\">\n                  <img src=\"img/character.svg\" className=\"character\"></img>\n                  <div className=\"Look-it-up\">Look it up!</div>\n                  <div className=\"PLAi-Bluetooth-\">\n                    PLAi를 움직일 Bluetooth를 찾아볼까요?\n                  </div>\n                  <div onClick={this.connectDevice}>\n                    <img\n                      src=\"img/bluetooth_button.svg\"\n                      className=\"bluetooth_button\"\n                    ></img>\n                  </div>\n                </div>\n              </div>\n            ) : null}\n            {this.state.isConnected && false ? (\n              <div className=\"info-panel panel\">\n                <div className=\"panel-title\">기기 정보</div>\n                {this.state.infoList.map((item) => {\n                  if (\n                    item.label === \"Wifi\" ||\n                    item.label === \"IP Address\" ||\n                    item.label === \"CPU Temp\" ||\n                    item.label === \"CPU Load\"\n                  ) {\n                    return (\n                      <div key={item.uuid} className=\"info-group\">\n                        <div className=\"label\">{item.label}</div>\n                        <div className=\"value\">{item.value}</div>\n                      </div>\n                    );\n                  } else {\n                    return null;\n                  }\n                })}\n              </div>\n            ) : null}\n            {this.state.isConnected &&\n            !(\n              this.state.infoList.find((i) => i.label === \"IP Address\") !==\n                undefined &&\n              this.state.infoList.find((i) => i.label === \"IP Address\")\n                .value !== \"\"\n            ) ? (\n              <div className=\"wifi-panel panel\">\n                <img\n                  src=\"img/icon_arrow_back.svg\"\n                  className=\"Icon-arrow_back\"\n                ></img>\n                <div className=\"WiFi-password-container\">\n                  <div className=\"wifi-setting-title\">\n                    <span className=\"WiFi-\">WiFi 설정</span>\n                    <img src=\"img/character2.svg\" className=\"character2\"></img>\n                  </div>\n                  <div className=\"wifi-name-container\">\n                    <div>\n                      <span className=\"Wifi-Name\">WiFi Name</span>\n                      <input\n                        className=\"wifi-name-input\"\n                        placeholder=\"  와이파이 이름(SSID)\"\n                        value={this.state.ssid}\n                        onChange={(value) =>\n                          this.setState({ ssid: value.target.value })\n                        }\n                      />\n                    </div>\n                    <div>\n                      <span className=\"Wifi-Password\">WiFi Password</span>\n                      <input\n                        className=\"wifi-password-input\"\n                        placeholder=\"  와이파이 비밀번호\"\n                        value={this.state.password}\n                        onChange={(value) =>\n                          this.setState({\n                            password: value.target.value.replace(\n                              /[ㄱ-ㅎㅏ-ㅣ가-힣]/g,\n                              \"\"\n                            ),\n                          })\n                        }\n                        type=\"password\"\n                      />\n                    </div>\n                  </div>\n                  {/* <div>\n                    <input placeholder=\"Key (Default: pibox)\" value={this.state.key} onChange={(value) => this.setState({ key: value.target.value })} />\n                  </div> */}\n                  <div>\n                    <img\n                      className=\"wifi-button\"\n                      onClick={this.inputWifi}\n                      disabled={this.state.wifiLock}\n                      src=\"img/wifi_button.svg\"\n                    ></img>\n                  </div>\n                </div>\n              </div>\n            ) : null}\n            {/* <div className=\"command-panel panel\">\n              <div className=\"panel-title\">커스텀 명령어</div>\n              {this.state.commandList.length > 0 ? (\n                <div>\n                  <div>\n                    {this.state.commandList.map((item) => (\n                      <div key={item.uuid} className=\"button-wrap\">\n                        <button size=\"small\" onClick={() => this.sendCommand(item.uuid)}>\n                          {item.label}\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                  <div>\n                    <input placeholder=\"Key (Default: pibox)\" value={this.state.key} onChange={(value) => this.setState({ key: value.target.value })} />\n                  </div>\n                  <div>\n                    <input type=\"textarea\" placeholder=\"Output\" value={this.state.commandOutput} readOnly={true} rows=\"10\" />\n                  </div>\n                </div>\n              ) : (\n                <p>커스텀 명령어가 없습니다.</p>\n              )}\n            </div> */}\n          </div>\n          {this.state.isConnected && false ? (\n            <div className=\"panel-container\">\n              <WifiSSH\n                ipAddress={\n                  this.state.infoList.find((i) => i.label === \"IP Address\") ===\n                  undefined\n                    ? \"\"\n                    : this.state.infoList.find((i) => i.label === \"IP Address\")\n                        .value\n                }\n              />\n            </div>\n          ) : null}\n          {this.state.isConnected &&\n          this.state.infoList.find((i) => i.label === \"IP Address\") !==\n            undefined &&\n          this.state.infoList.find((i) => i.label === \"IP Address\").value !==\n            \"\" &&\n          this.state.infoList.find((i) => i.label === \"Machine ID\") !==\n            undefined &&\n          this.state.infoList.find((i) => i.label === \"Machine ID\").value !==\n            \"\" ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(\n                    this.state.commandList.find((c) => c.label === \"camStart\")\n                      .uuid\n                  );\n                  await this.wait(2.0);\n                  await this.waitCamera();\n                  this.setState({ isBlockCoding: true });\n                }}\n              >\n                <div className=\"panel-title\">블록코드 시작</div>\n              </div>\n            </div>\n          ) : null}\n          {this.state.isConnected && this.state.isBlockCoding ? (\n            <div className=\"panel-container\">\n              <BlockCode\n                ipAddress={\n                  this.state.infoList.find((i) => i.label === \"IP Address\") ===\n                  undefined\n                    ? \"\"\n                    : this.state.infoList.find((i) => i.label === \"IP Address\")\n                        .value\n                }\n                machineId={\n                  this.state.infoList.find((i) => i.label === \"Machine ID\") ===\n                  undefined\n                    ? \"\"\n                    : this.state.infoList.find((i) => i.label === \"Machine ID\")\n                        .value\n                }\n                sendCommand={this.sendCommand}\n                uploadUUID={\n                  this.state.commandList.find((c) => c.label === \"upload\").uuid\n                }\n              />\n            </div>\n          ) : null}\n          {this.state.isConnected ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(\n                    this.state.commandList.find((c) => c.label === \"start\").uuid\n                  );\n                  await this.wait(0.5);\n                }}\n              >\n                <div className=\"panel-title\">PLAi 실행!</div>\n              </div>\n            </div>\n          ) : null}\n          {this.state.isConnected ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(\n                    this.state.commandList.find((c) => c.label === \"reboot\")\n                      .uuid\n                  );\n                  await this.wait(0.5);\n                }}\n              >\n                <div className=\"panel-title\">PLAi 재부팅!</div>\n              </div>\n            </div>\n          ) : null}\n          {this.state.isConnected ? (\n            <div className=\"panel\">\n              <div\n                className=\"panel-container\"\n                onClick={async () => {\n                  this.sendCommand(\n                    this.state.commandList.find((c) => c.label === \"stop\").uuid\n                  );\n                  this.setState({ isBlockCoding: false });\n                  await this.wait(0.5);\n                }}\n              >\n                <div className=\"panel-title\">PLAi 정지!</div>\n              </div>\n            </div>\n          ) : null}\n\n          <div className=\"copyright\">\n            PiBox . Open source under GPL-3.0 license.\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport BluetoothConnect from \"./BluetoothConnect\";\n\nfunction App() {\n  return <BluetoothConnect />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") || document.createElement(\"div\"));\n","module.exports = {\n  PREFIX: \"00000000-0000-0000-0000-\",\n  SERVICE_ID: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0000\",\n  SERVICE_NAME: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0001\",\n  DEVICE_MODEL: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0002\",\n  WIFI_NAME: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0003\",\n  IP_ADDRESS: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0004\",\n  INPUT: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0005\",\n  NOTIFY_MESSAGE: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0006\",\n  INPUT_SEP: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0007\",\n  CUSTOM_COMMAND_INPUT: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0008\",\n  CUSTOM_COMMAND_NOTIFY: \"FD2B4448-AA0F-4A15-A62F-EB0BE77A0009\",\n  CUSTOM_INFO_LABEL: \"FD2BCCCA\",\n  CUSTOM_INFO_COUNT: \"FD2BCCAA0000\",\n  CUSTOM_INFO: \"FD2BCCCB\",\n  CUSTOM_COMMAND_LABEL: \"FD2BCCCC\",\n  CUSTOM_COMMAND_COUNT: \"FD2BCCAC0000\"\n};\n"],"sourceRoot":""}