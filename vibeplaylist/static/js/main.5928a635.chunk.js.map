{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","html","setHtml","song","setSong","artist","setArtist","useEffect","fullText","split","i","length","canvas","document","getElementById","ctx","getContext","height","fillStyle","fillRect","width","font","fillText","drawInputText","map","e","beginPath","moveTo","lineTo","stroke","draw","className","type","onChange","url","target","value","params","replace","str","key","description","fetch","v","then","console","log","index","id","onClick","link","createElement","download","href","toDataURL","click","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5928a635.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [html, setHtml] = useState(\"\");\n  const [song, setSong] = useState([]);\n  const [artist, setArtist] = useState([]);\n\n  useEffect(() => {\n    const fullText = html.split(\"\\n\");\n    setSong([]);\n    setArtist([]);\n    for (let i = 0; i < fullText.length; i++) {\n      if (fullText[i] === \"노래\" && fullText.length - 4 > i && fullText[i + 2] === \"아티스트\") {\n        setSong((song) => [...song, fullText[i + 1]]);\n        setArtist((artist) => [...artist, fullText[i + 3]]);\n      }\n    }\n  }, [html]);\n\n  useEffect(() => {\n    let canvas = document.getElementById(\"canvas\");\n    function draw() {\n      var ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n\n      canvas.height = 150 * artist.length;\n      ctx.fillStyle = \"white\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = \"black\";\n\n      ctx.font = \"32px arial\";\n      song.map((e, i) => {\n        ctx.fillText(e, 20, 40 + 150 * i);\n      });\n      ctx.font = \"26px arial\";\n      artist.map((e, i) => {\n        ctx.fillText(e, 40, 100 + 150 * i);\n\n        ctx.beginPath();\n        ctx.moveTo(0, 150 * i);\n        ctx.lineTo(canvas.width, 150 * i);\n        ctx.stroke();\n      });\n    }\n    function drawInputText() {\n      var ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n      canvas.height = 150;\n      ctx.fillStyle = \"white\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = \"black\";\n\n      ctx.font = \"32px arial\";\n\n      ctx.fillText(\"Input text up there!\", 250, 50);\n    }\n    if (artist.length === 0) {\n      drawInputText();\n    } else {\n      draw();\n    }\n  }, [artist]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            const url = e.target.value;\n            let params = {};\n            url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (str, key, value) {\n              params[key] = value;\n            });\n\n            const description = fetch(\"https://www.googleapis.com/youtube/v3/videos?part=snippet&id=\" + params.v + \"&key=AIzaSyByqe-EizLZQ0Fj-aZR6sI2ILbjS7xj6iI\").then((e) => e);\n            console.log(description);\n          }}\n        />\n        <textarea\n          width={\"80%\"}\n          onChange={(e) => {\n            setHtml(e.target.value);\n          }}\n        />\n        <div>\n          {song.map((e, index) => (\n            <div key={index}>{e}</div>\n          ))}\n        </div>\n        <div>\n          <canvas width={750} height={150} id=\"canvas\" />\n        </div>\n        <div>\n          <button\n            onClick={(e) => {\n              var link = document.createElement(\"a\");\n              link.download = \"filename.png\";\n              link.href = document.getElementById(\"canvas\").toDataURL();\n              link.click();\n            }}\n          >\n            download\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}